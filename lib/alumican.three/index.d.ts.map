{"version":3,"sources":["../src/alumican.three/alm/util/ThreeUtil.ts","../src/alumican.three/alm/util/EasingThreeVector3.ts","../src/alumican.three/alm/io/ThreeTextureFileHandler.ts","../src/alumican.three/index.ts"],"names":[],"mappings":";AAEA,kBAAU,GAAG,CAAC,IAAI,CAAC;IAElB,MAAa,SAAS;eAEP,iBAAiB,CAAC,UAAS,MAAM,GAAE;YAAE,YAAY,EAAC,MAAM,CAAC;YAAC,cAAc,EAAC,MAAM,CAAA;SAAE;eAOjF,WAAW,CAAC,OAAM,KAAK,CAAC,QAAQ,EAAE,OAAM,KAAK,CAAC,KAAK,GAAE,IAAI;QAQvE,OAAO;KACP;CACD;ACrBD,kBAAU,GAAG,CAAC,IAAI,CAAC;IAElB,OAAO,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IAEtC,MAAa,kBAAkB;oBAQlB,WAAU,KAAK,CAAC,OAAO,EAAE,SAAO,MAAY,EAAE,YAAU,MAAU;QAgBvE,MAAM,CAAC,gBAAc,OAAc,GAAE,IAAI;QAMzC,SAAS,CAAC,GAAE,MAAM,EAAE,GAAE,MAAM,EAAE,GAAE,MAAM,GAAE,IAAI;QAM5C,SAAS,CAAC,QAAO,MAAM,GAAE,IAAI;QAgB7B,CAAC,EAAC,WAAW,CAAC;QACd,CAAC,EAAC,WAAW,CAAC;QACd,CAAC,EAAC,WAAW,CAAC;KACrB;CACD;AC5DD,kBAAU,GAAG,CAAC,EAAE,CAAC;IAEhB,MAAa,uBAAwB,YAAW,YAAY;;QAqBpD,OAAO,IAAG,MAAM;QAIhB,IAAI,CAAC,KAAI,MAAM,EAAE,YAAW,gBAAgB,EAAE,SAAQ,aAAa,GAAE,IAAI;QA0BhF,OAAc,IAAI,EAAC,MAAM,CAAmB;KAC5C;CACD","file":"index.d.ts","sourcesContent":["/// <reference path='../../index.ts' />\n\nnamespace alm.util {\n\n\texport class ThreeUtil {\n\n\t\tpublic static getEmbeddedShader(shaderId:string):{ vertexShader:string, fragmentShader:string } {\n\t\t\treturn {\n\t\t\t\tvertexShader: document.getElementById(shaderId + '.vert').textContent,\n\t\t\t\tfragmentShader: document.getElementById(shaderId + '.frag').textContent\n\t\t\t};\n\t\t}\n\n\t\tpublic static setEmission(model:THREE.Object3D, color:THREE.Color):void {\n\t\t\tmodel.traverse((o:any):any => {\n\t\t\t\tif (o.isMesh) {\n\t\t\t\t\to.material.emissive = color;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tprivate constructor() {}\n\t}\n}\n","/// <reference path='../../index.ts' />\n\nnamespace alm.util {\n\n\timport EasingValue = math.EasingValue;\n\n\texport class EasingThreeVector3 {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(initValue:THREE.Vector3, easing:number = 0.1, tolerance:number = 0) {\n\t\t\tthis.x = new EasingValue(initValue.x, easing, tolerance);\n\t\t\tthis.y = new EasingValue(initValue.y, easing, tolerance);\n\t\t\tthis.z = new EasingValue(initValue.z, easing, tolerance);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic update(useTransition:boolean = true):void {\n\t\t\tthis.x.update(useTransition);\n\t\t\tthis.y.update(useTransition);\n\t\t\tthis.z.update(useTransition);\n\t\t}\n\n\t\tpublic setTarget(x:number, y:number, z:number):void {\n\t\t\tthis.x.target = x;\n\t\t\tthis.y.target = y;\n\t\t\tthis.z.target = z;\n\t\t}\n\n\t\tpublic setEasing(easing:number):void {\n\t\t\tthis.x.easing = easing;\n\t\t\tthis.y.easing = easing;\n\t\t\tthis.z.easing = easing;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic x:EasingValue;\n\t\tpublic y:EasingValue;\n\t\tpublic z:EasingValue;\n\t}\n}\n1\n","/// <reference path='../../index.ts' />\n\nnamespace alm.io {\n\n\texport class ThreeTextureFileHandler implements IFileHandler {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor() {\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic getType():string {\n\t\t\treturn ThreeTextureFileHandler.TYPE;\n\t\t}\n\n\t\tpublic load(url:string, onComplete:CompleteFunction, onError:ErrorFunction):void {\n\t\t\tconst loader:THREE.TextureLoader = new THREE.TextureLoader();\n\t\t\tloader.crossOrigin = 'anonymous';\n\t\t\tconst texture:THREE.Texture = loader.load(\n\t\t\t\turl,\n\t\t\t\t(texture:THREE.Texture):void => {\n\t\t\t\t\tonComplete(texture);\n\t\t\t\t},\n\t\t\t\t(event:ProgressEvent):void => {\n\t\t\t\t},\n\t\t\t\t(event:ErrorEvent):void => {\n\t\t\t\t\tonError(event);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic static TYPE:string = 'THREE.Texture';\n\t}\n}\n","/* ---------- project dependencies ---------- */\n\n/// <reference types='three@0.93' />\n/// <reference types='alumican' />\n\n\n/* ---------- project scripts ---------- */\n\n/// <reference path='alm/util/ThreeUtil.ts' />\n/// <reference path='alm/util/EasingThreeVector3.ts' />\n/// <reference path='alm/io/ThreeTextureFileHandler.ts' />\n"]}