{"version":3,"sources":["../src/alumican.three/alm/util/ThreeUtil.ts","../src/alumican.three/alm/io/ThreeTextureFileHandler.ts","../src/alumican.three/alm/util/EasingThreeVector3.ts"],"names":["alm","util","ThreeUtil","getEmbeddedShader","shaderId","vertexShader","document","getElementById","textContent","fragmentShader","setEmission","model","color","traverse","o","isMesh","material","emissive","constructor","EasingValue","math","EasingThreeVector3","initValue","easing","tolerance","this","x","y","z","update","useTransition","setTarget","target","setEasing","io","ThreeTextureFileHandler","getType","type","load","url","onComplete","onError","loader","THREE","TextureLoader","crossOrigin","texture","event"],"mappings":"AAEA,ICAUA,KDAV,SAAUA,IAAIA,EAAAC,OAAAD,EAAAC,KAAI,KAEJC,gBAELC,yBAAyBC,GAC/B,MAAO,CACNC,aAAcC,SAASC,eAAeH,EAAW,SAASI,YAC1DC,eAAgBH,SAASC,eAAeH,EAAW,SAASI,aAIvDE,mBAAmBC,EAAsBC,GAC/CD,EAAME,SAAS,IACVC,EAAEC,SACLD,EAAEE,SAASC,SAAWL,KAKzBM,iBAnBF,CAAUlB,IAAAA,KAAG,IEAb,SAAUA,GAAI,IAAAC,EAENkB,EAFMlB,EAAAD,EAAAC,OAAAD,EAAAC,KAAI,IAEVkB,EAAcnB,EAAAoB,KAAKD,YAEblB,EAAAoB,yBAQZH,YAAYI,EAAyBC,EAAgB,GAAKC,EAAmB,GAC5EC,KAAKC,EAAI,IAAIP,EAAYG,EAAUI,EAAGH,EAAQC,GAC9CC,KAAKE,EAAI,IAAIR,EAAYG,EAAUK,EAAGJ,EAAQC,GAC9CC,KAAKG,EAAI,IAAIT,EAAYG,EAAUM,EAAGL,EAAQC,GAaxCK,OAAOC,GAAwB,GACrCL,KAAKC,EAAEG,OAAOC,GACdL,KAAKE,EAAEE,OAAOC,GACdL,KAAKG,EAAEC,OAAOC,GAGRC,UAAUL,EAAUC,EAAUC,GACpCH,KAAKC,EAAEM,OAASN,EAChBD,KAAKE,EAAEK,OAASL,EAChBF,KAAKG,EAAEI,OAASJ,EAGVK,UAAUV,GAChBE,KAAKC,EAAEH,OAASA,EAChBE,KAAKE,EAAEJ,OAASA,EAChBE,KAAKG,EAAEL,OAASA,IA3CnB,CAAUvB,IAAAA,KAAG,IDAb,SAAUA,GAAI,CAAAkC,EAAAlC,EAAAkC,KAAAlC,EAAAkC,GAAE,UAEFC,EAQZjB,eAaOkB,UACN,OAAOD,EAAwBE,KAGzBC,KAAKC,EAAYC,EAA6BC,GACpD,MAAMC,EAA6B,IAAIC,MAAMC,cAC7CF,EAAOG,YAAc,YACSH,EAAOJ,KACpCC,EACA,IACCC,EAAWM,IAEZ,MAEA,IACCL,EAAQM,MAeYZ,EAAAE,KAAc,gBAnDzBH,EAAAC,wBAAuBA,GAFrC,CAAUnC,IAAAA,KAAG","file":"index.min.js","sourcesContent":["/// <reference path='../../index.ts' />\n\nnamespace alm.util {\n\n\texport class ThreeUtil {\n\n\t\tpublic static getEmbeddedShader(shaderId:string):{ vertexShader:string, fragmentShader:string } {\n\t\t\treturn {\n\t\t\t\tvertexShader: document.getElementById(shaderId + '.vert').textContent,\n\t\t\t\tfragmentShader: document.getElementById(shaderId + '.frag').textContent\n\t\t\t};\n\t\t}\n\n\t\tpublic static setEmission(model:THREE.Object3D, color:THREE.Color):void {\n\t\t\tmodel.traverse((o:any):any => {\n\t\t\t\tif (o.isMesh) {\n\t\t\t\t\to.material.emissive = color;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tprivate constructor() {}\n\t}\n}\n","/// <reference path='../../index.ts' />\n\nnamespace alm.io {\n\n\texport class ThreeTextureFileHandler implements IFileHandler {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor() {\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic getType():string {\n\t\t\treturn ThreeTextureFileHandler.type;\n\t\t}\n\n\t\tpublic load(url:string, onComplete:CompleteFunction, onError:ErrorFunction):void {\n\t\t\tconst loader:THREE.TextureLoader = new THREE.TextureLoader();\n\t\t\tloader.crossOrigin = 'anonymous';\n\t\t\tconst texture:THREE.Texture = loader.load(\n\t\t\t\turl,\n\t\t\t\t(texture:THREE.Texture):void => {\n\t\t\t\t\tonComplete(texture);\n\t\t\t\t},\n\t\t\t\t(event:ProgressEvent):void => {\n\t\t\t\t},\n\t\t\t\t(event:ErrorEvent):void => {\n\t\t\t\t\tonError(event);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic static readonly type:string = 'THREE.Texture';\n\t}\n}\n","/// <reference path='../../index.ts' />\n\nnamespace alm.util {\n\n\timport EasingValue = math.EasingValue;\n\n\texport class EasingThreeVector3 {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(initValue:THREE.Vector3, easing:number = 0.1, tolerance:number = 0) {\n\t\t\tthis.x = new EasingValue(initValue.x, easing, tolerance);\n\t\t\tthis.y = new EasingValue(initValue.y, easing, tolerance);\n\t\t\tthis.z = new EasingValue(initValue.z, easing, tolerance);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic update(useTransition:boolean = true):void {\n\t\t\tthis.x.update(useTransition);\n\t\t\tthis.y.update(useTransition);\n\t\t\tthis.z.update(useTransition);\n\t\t}\n\n\t\tpublic setTarget(x:number, y:number, z:number):void {\n\t\t\tthis.x.target = x;\n\t\t\tthis.y.target = y;\n\t\t\tthis.z.target = z;\n\t\t}\n\n\t\tpublic setEasing(easing:number):void {\n\t\t\tthis.x.easing = easing;\n\t\t\tthis.y.easing = easing;\n\t\t\tthis.z.easing = easing;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic x:EasingValue;\n\t\tpublic y:EasingValue;\n\t\tpublic z:EasingValue;\n\t}\n}\n1\n"]}