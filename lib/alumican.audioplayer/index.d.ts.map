{"version":3,"sources":["../src/alumican.audioplayer/alm/audio/core/AudioClip.ts","../src/alumican.audioplayer/alm/audio/AudioPlayer.ts","../src/alumican.audioplayer/alm/audio/CrossOverLoopAudio.ts","../src/alumican.audioplayer/alm/audio/FootstepAudio.ts","../src/alumican.audioplayer/index.ts"],"names":[],"mappings":";AAEA,kBAAU,GAAG,CAAC,KAAK,CAAC;IAKnB,MAAa,SAAS;oBAQF,SAAQ,YAAY,EAAE,aAAY,SAAS,EAAE,WAAS,MAAW,EAAE,eAAa,MAAU;QAgCtG,IAAI,CAAC,KAAI,MAAM,GAAE,IAAI;QAsBrB,IAAI,CAAC,OAAK,OAAe,EAAE,YAAU,OAAc,GAAE,IAAI;QAWzD,IAAI,IAAG,IAAI;QAQX,SAAS,IAAG,MAAM;QAIlB,SAAS,CAAC,QAAO,MAAM,GAAE,IAAI;QAO7B,MAAM,CAAC,IAAG,MAAM,EAAE,WAAS,MAAa,EAAE,aAAW,QAAe,GAAE,IAAI;QAU1E,MAAM,CAAC,WAAS,MAAa,GAAE,IAAI;QAInC,OAAO,CAAC,WAAS,MAAa,EAAE,iBAAe,OAAc,GAAE,IAAI;QAQ1E,OAAO,CAAC,WAAW;QAIZ,cAAc,IAAG,OAAO;QAIxB,WAAW,IAAG,MAAM;QAIpB,cAAc,IAAG,MAAM;QAc9B,OAAO,CAAC,WAAW,CAAS;QAC5B,OAAO,CAAC,OAAO,CAAc;QAC7B,OAAO,CAAC,MAAM,CAAQ;QACtB,OAAO,CAAC,YAAY,CAAQ;QAC5B,OAAO,CAAC,MAAM,CAAa;QAC3B,OAAO,CAAC,QAAQ,CAAQ;QACxB,OAAO,CAAC,UAAU,CAAuB;QACzC,OAAO,CAAC,QAAQ,CAAU;QAC1B,OAAO,CAAC,WAAW,CAAW;KAC9B;CACD;AC3JD,kBAAU,GAAG,CAAC,KAAK,CAAC;IAEnB,OAAO,eAAe,GAAG,GAAG,CAAC,KAAK,CAAC,eAAe,CAAC;IAGnD,MAAa,WAAY,SAAQ,eAAe;QAY/C,OAAO;QAyBA,GAAG,CAAC,KAAI,MAAM,EAAE,eAAa,MAAU,EAAE,KAAG,MAAW,GAAE,OAAO;QAQhE,OAAO,CAAC,IAAG,MAAM,GAAE,SAAS;QAK5B,eAAe,IAAG,MAAM;QAKxB,eAAe,CAAC,QAAO,MAAM,GAAE,IAAI;eAgB5B,WAAW,IAAG,WAAW;QACvC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAoB;QAE3C,OAAO,CAAC,WAAW,CAAS;QAC5B,OAAO,CAAC,OAAO,CAAc;QAC7B,OAAO,CAAC,SAAS,CAAiB;QAElC,OAAO,CAAC,cAAc,CAAU;QAChC,OAAO,CAAC,YAAY,CAAQ;KAC5B;CACD;ACtFD,kBAAU,GAAG,CAAC,KAAK,CAAC;IAEnB,MAAa,kBAAkB;oBAQX,oBAAkB,MAAU;QAyBxC,GAAG,CAAC,KAAI,MAAM,EAAE,eAAa,MAAU,GAAE,IAAI;QAO7C,IAAI,IAAG,IAAI;QAOX,IAAI,IAAG,IAAI;QAOX,SAAS,CAAC,QAAO,MAAM,GAAE,IAAI;QAQpC,OAAO,CAAC,WAAW;QASnB,OAAO,CAAC,WAAW;QAYnB,OAAO,CAAC,YAAY,CAGlB;QAYF,OAAO,CAAC,WAAW,CAAa;QAChC,OAAO,CAAC,MAAM,CAAQ;QAEtB,OAAO,CAAC,OAAO,CAAU;QACzB,OAAO,CAAC,IAAI,CAAW;QACvB,OAAO,CAAC,SAAS,CAAQ;QACzB,OAAO,CAAC,SAAS,CAAQ;QAEzB,OAAO,CAAC,SAAS,CAAS;QAE1B,OAAO,CAAC,iBAAiB,CAAQ;QACjC,OAAO,CAAC,SAAS,CAAQ;KACzB;CACD;ACjHD,kBAAU,GAAG,CAAC,KAAK,CAAC;IAKnB,MAAa,aAAa;oBAQN,cAAY,MAAa,EAAE,cAAY,MAAY;QA0B/D,GAAG,CAAC,KAAI,MAAM,EAAE,eAAa,MAAU,GAAE,IAAI;QAO7C,IAAI,CAAC,cAAY,OAAc,GAAE,IAAI;QAUrC,IAAI,IAAG,IAAI;QAOX,QAAQ,CAAC,YAAW,MAAM,GAAE,IAAI;QAIhC,SAAS,CAAC,QAAO,MAAM,GAAE,IAAI;QAIpC,OAAO,CAAC,YAAY,CAclB;QAYF,OAAO,CAAC,WAAW,CAAa;QAChC,OAAO,CAAC,MAAM,CAAQ;QAEtB,OAAO,CAAC,OAAO,CAAU;QACzB,OAAO,CAAC,SAAS,CAAQ;QACzB,OAAO,CAAC,SAAS,CAAQ;QAEzB,OAAO,CAAC,SAAS,CAAQ;QACzB,OAAO,CAAC,qBAAqB,CAAS;QAEtC,OAAO,CAAC,WAAW,CAAQ;QAC3B,OAAO,CAAC,WAAW,CAAQ;QAC3B,OAAO,CAAC,QAAQ,CAAQ;QACxB,OAAO,CAAC,UAAU,CAAQ;QAE1B,OAAO,CAAC,SAAS,CAAS;KAC1B;CACD","file":"index.d.ts","sourcesContent":["/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.audio {\n\n\timport Cmd = alm.util.Cmd;\n\timport Easing = alm.math.Easing;\n\n\texport class AudioClip {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic constructor(context:AudioContext, destination:AudioNode, fileName:string = '', masterVolume:number = 1) {\n\t\t\t//this.context = new AudioContext();\n\t\t\tthis.context = context;\n\t\t\tthis.masterVolume = masterVolume;\n\n\t\t\tthis.buffer = null;\n\t\t\tthis.sourceNode = null;\n\t\t\tthis.isAvailable = false;\n\n\t\t\tthis.duration = 0;\n\n\t\t\tthis.gainNode = this.context.createGain();\n\t\t\tthis.gainNode.connect(destination);\n\n\t\t\tthis.volume = 1;\n\t\t\tthis.applyVolume();\n\n\t\t\tif (fileName != '') {\n\t\t\t\tthis.load(fileName);\n\t\t\t}\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic load(url:string):void {\n\t\t\tconst request:XMLHttpRequest = new XMLHttpRequest();\n\t\t\trequest.responseType = 'arraybuffer';\n\t\t\trequest.onreadystatechange = ():void => {\n\t\t\t\tif (request.readyState == 4) {\n\t\t\t\t\tif (request.status == 0 || request.status == 200) {\n\t\t\t\t\t\tthis.context.decodeAudioData(request.response, (buffer:AudioBuffer):void => {\n\t\t\t\t\t\t\ttrace('[AudioClip] load complete :', url);\n\t\t\t\t\t\t\tthis.isAvailable = true;\n\t\t\t\t\t\t\tthis.buffer = buffer;\n\t\t\t\t\t\t\tthis.duration = this.buffer.duration;\n\t\t\t\t\t\t}, (error:Error):void => {\n\t\t\t\t\t\t\ttrace('[AudioClip] load error :', error);\n\t\t\t\t\t\t\ttrace(error);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\trequest.open('GET', url, true);\n\t\t\trequest.send('');\n\t\t}\n\n\t\tpublic play(loop:boolean = false, overwrite:boolean = true):void {\n\t\t\tif (!this.isAvailable) return;\n\t\t\tif (!overwrite && this.sourceNode) return;\n\t\t\tthis.stop();\n\t\t\tthis.sourceNode = this.context.createBufferSource();\n\t\t\tthis.sourceNode.buffer = this.buffer;\n\t\t\tthis.sourceNode.loop = loop;\n\t\t\tthis.sourceNode.connect(this.gainNode);\n\t\t\tthis.sourceNode.start(0);\n\t\t}\n\n\t\tpublic stop():void {\n\t\t\tif (this.sourceNode) {\n\t\t\t\tthis.sourceNode.stop();\n\t\t\t\tthis.sourceNode.disconnect(this.gainNode);\n\t\t\t\tthis.sourceNode = null;\n\t\t\t}\n\t\t}\n\n\t\tpublic getVolume():number {\n\t\t\treturn this.volume;\n\t\t}\n\n\t\tpublic setVolume(volume:number):void {\n\t\t\tCmd.stop(this.volumeTween);\n\t\t\tif (this.volume == volume) return;\n\t\t\tthis.volume = volume;\n\t\t\tthis.applyVolume();\n\t\t}\n\n\t\tpublic fadeTo(to:number, duration:number = 1000, onComplete:Function = null):void {\n\t\t\tCmd.stop(this.volumeTween);\n\t\t\tthis.volumeTween = new cmd.Tween(this, { volume: to }, null, duration, Easing.linear, null, ():void => {\n\t\t\t\tthis.applyVolume();\n\t\t\t}, ():void => {\n\t\t\t\tif (onComplete) onComplete();\n\t\t\t});\n\t\t\tthis.volumeTween.execute();\n\t\t}\n\n\t\tpublic fadeIn(duration:number = 1000):void {\n\t\t\tthis.fadeTo(1, duration);\n\t\t}\n\n\t\tpublic fadeOut(duration:number = 1000, stopOnComplete:boolean = true):void {\n\t\t\tthis.fadeTo(0, duration, ():void => {\n\t\t\t\tif (stopOnComplete) {\n\t\t\t\t\tthis.stop();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tprivate applyVolume():void {\n\t\t\tthis.gainNode.gain.value = this.volume * this.masterVolume;\n\t\t}\n\n\t\tpublic getIsAvailable():boolean {\n\t\t\treturn this.isAvailable;\n\t\t}\n\n\t\tpublic getDuration():number {\n\t\t\treturn this.duration;\n\t\t}\n\n\t\tpublic getCurrentTime():number {\n\t\t\treturn this.context.currentTime;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate isAvailable:boolean;\n\t\tprivate context:AudioContext;\n\t\tprivate volume:number;\n\t\tprivate masterVolume:number;\n\t\tprivate buffer:AudioBuffer;\n\t\tprivate duration:number;\n\t\tprivate sourceNode:AudioBufferSourceNode;\n\t\tprivate gainNode:GainNode;\n\t\tprivate volumeTween:cmd.Tween;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.audio {\n\n\timport EventDispatcher = alm.event.EventDispatcher;\n\timport Hash = alm.util.Hash;\n\n\texport class AudioPlayer extends EventDispatcher {\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate constructor() {\n\t\t\tsuper();\n\n\t\t\tconst AudioContext:any = window['AudioContext'] || window['webkitAudioContext'] || null;\n\t\t\tthis.isAvailable = AudioContext != null;\n\t\t\tif (this.isAvailable) {\n\t\t\t\tthis.context = new AudioContext();\n\t\t\t\tthis.clipsById = {};\n\n\t\t\t\tthis.masterGainNode = this.context.createGain();\n\t\t\t\tthis.masterGainNode.connect(this.context.destination);\n\t\t\t\tthis.masterVolume = 1;\n\t\t\t}\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic add(url:string, masterVolute:number = 1, id:string = ''):boolean {\n\t\t\tif (!this.isAvailable) return false;\n\t\t\tif (id == '') id = url;\n\t\t\tif (this.clipsById[id]) return false;\n\t\t\tthis.clipsById[id] = new AudioClip(this.context, this.masterGainNode, url, masterVolute);\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic getClip(id:string):AudioClip {\n\t\t\tif (!this.isAvailable) return;\n\t\t\treturn this.clipsById[id];\n\t\t}\n\n\t\tpublic getMasterVolume():number {\n\t\t\tif (!this.isAvailable) return 0;\n\t\t\treturn this.masterVolume;\n\t\t}\n\n\t\tpublic setMasterVolume(volume:number):void {\n\t\t\tif (!this.isAvailable) return;\n\t\t\tthis.masterVolume = volume;\n\t\t\tthis.masterGainNode.gain.value = this.masterVolume;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic static getInstance():AudioPlayer { return AudioPlayer.instance || (AudioPlayer.instance = new AudioPlayer()); }\n\t\tprivate static instance:AudioPlayer = null;\n\n\t\tprivate isAvailable:boolean;\n\t\tprivate context:AudioContext;\n\t\tprivate clipsById:Hash<AudioClip>;\n\n\t\tprivate masterGainNode:GainNode;\n\t\tprivate masterVolume:number;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.audio {\n\n\texport class CrossOverLoopAudio {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic constructor(crossOverDuration:number = 1) {\n\t\t\tthis.audioPlayer = AudioPlayer.getInstance();\n\n\t\t\tthis.clipCount = 0;\n\t\t\tthis.clipIndex = 0;\n\t\t\tthis.clipIds = [];\n\t\t\tthis.clip = null;\n\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.volume = 1;\n\n\t\t\tthis.crossOverDuration = crossOverDuration;\n\t\t\tthis.timeoutId = -1;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic add(url:string, masterVolume:number = 1):void {\n\t\t\tconst id = url + '-' + this.clipCount;\n\t\t\tthis.audioPlayer.add(url, masterVolume, id);\n\t\t\tthis.clipIds.push(id);\n\t\t\tthis.clipCount = this.clipIds.length;\n\t\t}\n\n\t\tpublic play():void {\n\t\t\tif (this.isPlaying) return;\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.playCurrent();\n\t\t}\n\n\t\tpublic stop():void {\n\t\t\tif (!this.isPlaying) return;\n\t\t\tthis.isPlaying = false;\n\n\t\t\tthis.stopCurrent();\n\t\t}\n\n\t\tpublic setVolume(volume:number):void {\n\t\t\tthis.volume = volume;\n\n\t\t\tif (this.clip) {\n\t\t\t\tthis.clip.setVolume(this.volume);\n\t\t\t}\n\t\t}\n\n\t\tprivate playCurrent():void {\n\t\t\tthis.clip = this.audioPlayer.getClip(this.clipIds[this.clipIndex]);\n\t\t\tthis.clip.setVolume(this.volume);\n\t\t\tthis.clip.play(false, true);\n\n\t\t\tconst interval = (this.clip.getDuration() - this.crossOverDuration) * 1000;\n\t\t\tthis.timeoutId = window.setTimeout(this.timerHandler, interval);\n\t\t}\n\n\t\tprivate stopCurrent():void {\n\t\t\tif (this.timeoutId != -1) {\n\t\t\t\twindow.clearTimeout(this.timeoutId);\n\t\t\t\tthis.timeoutId = -1;\n\t\t\t}\n\n\t\t\tif (this.clip) {\n\t\t\t\tthis.clip.stop();\n\t\t\t\tthis.clip = null;\n\t\t\t}\n\t\t}\n\n\t\tprivate timerHandler = ():void => {\n\t\t\tif (++this.clipIndex == this.clipCount) this.clipIndex = 0;\n\t\t\tthis.playCurrent();\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate audioPlayer:AudioPlayer;\n\t\tprivate volume:number;\n\n\t\tprivate clipIds:string[];\n\t\tprivate clip:AudioClip;\n\t\tprivate clipIndex:number;\n\t\tprivate clipCount:number;\n\n\t\tprivate isPlaying:boolean;\n\n\t\tprivate crossOverDuration:number;\n\t\tprivate timeoutId:number;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.audio {\n\n\timport Num = alm.util.Num;\n\timport Easing = alm.math.Easing;\n\n\texport class FootstepAudio {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic constructor(intervalMin:number = 0.12, intervalMax:number = 0.6) {\n\t\t\tthis.audioPlayer = AudioPlayer.getInstance();\n\n\t\t\tthis.intervalMin = intervalMin;\n\t\t\tthis.intervalMax = intervalMax;\n\t\t\tthis.intervalId = -1;\n\t\t\tthis.interval = this.intervalMax;\n\n\t\t\tthis.clipIndex = -1;\n\t\t\tthis.clipCount = 0;\n\t\t\tthis.clipIds = [];\n\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.volume = 1;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic add(url:string, masterVolume:number = 1):void {\n\t\t\tconst id = url + '-' + this.clipCount;\n\t\t\tthis.audioPlayer.add(url, masterVolume, id);\n\t\t\tthis.clipIds.push(id);\n\t\t\tthis.clipCount = this.clipIds.length;\n\t\t}\n\n\t\tpublic play(immediately:boolean = true):void {\n\t\t\tif (this.isPlaying) return;\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.isWaitingForFirstStep = true;\n\t\t\tthis.startTime = immediately ? 0 : new Date().getTime();\n\t\t\tthis.intervalId = window.setInterval(this.timerHandler, 1000 / 60);\n\t\t\tthis.timerHandler();\n\t\t}\n\n\t\tpublic stop():void {\n\t\t\tif (!this.isPlaying) return;\n\t\t\tthis.isPlaying = false;\n\n\t\t\twindow.clearInterval(this.intervalId);\n\t\t}\n\n\t\tpublic setSpeed(speedRatio:number):void {\n\t\t\tthis.interval = Num.ease(speedRatio, 0, 1, this.intervalMax, this.intervalMin, Easing.easeOutSine);\n\t\t}\n\n\t\tpublic setVolume(volume:number):void {\n\t\t\tthis.volume = volume;\n\t\t}\n\n\t\tprivate timerHandler = ():void => {\n\t\t\tconst interval = this.isWaitingForFirstStep ? (this.interval * 0.5) : this.interval;\n\t\t\tconst time = new Date().getTime();\n\t\t\tif (time - this.startTime >= interval * 1000) {\n\t\t\t\tthis.startTime = time;\n\t\t\t\tthis.isWaitingForFirstStep = false;\n\n\t\t\t\tif (++this.clipIndex >= this.clipCount) {\n\t\t\t\t\tthis.clipIndex = 0;\n\t\t\t\t}\n\t\t\t\tconst clipId = this.clipIds[this.clipIndex];\n\t\t\t\tthis.audioPlayer.getClip(clipId).setVolume(this.volume);\n\t\t\t\tthis.audioPlayer.getClip(clipId).play(false, true);\n\t\t\t}\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate audioPlayer:AudioPlayer;\n\t\tprivate volume:number;\n\n\t\tprivate clipIds:string[];\n\t\tprivate clipIndex:number;\n\t\tprivate clipCount:number;\n\n\t\tprivate startTime:number;\n\t\tprivate isWaitingForFirstStep:boolean;\n\n\t\tprivate intervalMin:number;\n\t\tprivate intervalMax:number;\n\t\tprivate interval:number;\n\t\tprivate intervalId:number;\n\n\t\tprivate isPlaying:boolean;\n\t}\n}\n","/* ---------- project dependencies ---------- */\n\n/// <reference types='alumican' />\n\n\n/* ---------- project scripts ---------- */\n\n/// <reference path='alm/audio/core/AudioClip.ts' />\n/// <reference path='alm/audio/AudioPlayer.ts' />\n/// <reference path='alm/audio/CrossOverLoopAudio.ts' />\n/// <reference path='alm/audio/FootstepAudio.ts' />\n"]}