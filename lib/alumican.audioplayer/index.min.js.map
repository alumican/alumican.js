{"version":3,"sources":["../src/alumican.audioplayer/alm/audio/core/AudioClip.ts","../src/alumican.audioplayer/alm/audio/FootstepAudio.ts","../src/alumican.audioplayer/alm/audio/AudioPlayer.ts","../src/alumican.audioplayer/alm/audio/CrossOverLoopAudio.ts"],"names":["alm","audio","Cmd","Easing","util","math","AudioClip","constructor","context","destination","fileName","masterVolume","this","buffer","sourceNode","isAvailable","duration","gainNode","createGain","connect","volume","applyVolume","load","url","request","XMLHttpRequest","responseType","onreadystatechange","readyState","status","decodeAudioData","response","trace","error","open","send","play","loop","overwrite","stop","createBufferSource","start","disconnect","getVolume","setVolume","volumeTween","fadeTo","to","onComplete","cmd","Tween","linear","execute","fadeIn","fadeOut","stopOnComplete","gain","value","getIsAvailable","getDuration","getCurrentTime","currentTime","EventDispatcher","event","AudioPlayer","super","AudioContext","window","clipsById","masterGainNode","add","masterVolute","id","getClip","getMasterVolume","setMasterVolume","getInstance","instance","CrossOverLoopAudio","crossOverDuration","timerHandler","clipIndex","clipCount","playCurrent","audioPlayer","clipIds","clip","isPlaying","timeoutId","push","length","stopCurrent","interval","setTimeout","clearTimeout","Num","FootstepAudio","intervalMin","intervalMax","isWaitingForFirstStep","time","Date","getTime","startTime","clipId","intervalId","immediately","setInterval","clearInterval","setSpeed","speedRatio","ease","easeOutSine"],"mappings":"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","file":"index.min.js","sourcesContent":["/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.audio {\n\n\timport Cmd = alm.util.Cmd;\n\timport Easing = alm.math.Easing;\n\n\texport class AudioClip {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic constructor(context:AudioContext, destination:AudioNode, fileName:string = '', masterVolume:number = 1) {\n\t\t\t//this.context = new AudioContext();\n\t\t\tthis.context = context;\n\t\t\tthis.masterVolume = masterVolume;\n\n\t\t\tthis.buffer = null;\n\t\t\tthis.sourceNode = null;\n\t\t\tthis.isAvailable = false;\n\n\t\t\tthis.duration = 0;\n\n\t\t\tthis.gainNode = this.context.createGain();\n\t\t\tthis.gainNode.connect(destination);\n\n\t\t\tthis.volume = 1;\n\t\t\tthis.applyVolume();\n\n\t\t\tif (fileName != '') {\n\t\t\t\tthis.load(fileName);\n\t\t\t}\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic load(url:string):void {\n\t\t\tconst request:XMLHttpRequest = new XMLHttpRequest();\n\t\t\trequest.responseType = 'arraybuffer';\n\t\t\trequest.onreadystatechange = ():void => {\n\t\t\t\tif (request.readyState == 4) {\n\t\t\t\t\tif (request.status == 0 || request.status == 200) {\n\t\t\t\t\t\tthis.context.decodeAudioData(request.response, (buffer:AudioBuffer):void => {\n\t\t\t\t\t\t\ttrace('[AudioClip] load complete :', url);\n\t\t\t\t\t\t\tthis.isAvailable = true;\n\t\t\t\t\t\t\tthis.buffer = buffer;\n\t\t\t\t\t\t\tthis.duration = this.buffer.duration;\n\t\t\t\t\t\t}, (error:Error):void => {\n\t\t\t\t\t\t\ttrace('[AudioClip] load error :', error);\n\t\t\t\t\t\t\ttrace(error);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\trequest.open('GET', url, true);\n\t\t\trequest.send('');\n\t\t}\n\n\t\tpublic play(loop:boolean = false, overwrite:boolean = true):void {\n\t\t\tif (!this.isAvailable) return;\n\t\t\tif (!overwrite && this.sourceNode) return;\n\t\t\tthis.stop();\n\t\t\tthis.sourceNode = this.context.createBufferSource();\n\t\t\tthis.sourceNode.buffer = this.buffer;\n\t\t\tthis.sourceNode.loop = loop;\n\t\t\tthis.sourceNode.connect(this.gainNode);\n\t\t\tthis.sourceNode.start(0);\n\t\t}\n\n\t\tpublic stop():void {\n\t\t\tif (this.sourceNode) {\n\t\t\t\tthis.sourceNode.stop();\n\t\t\t\tthis.sourceNode.disconnect(this.gainNode);\n\t\t\t\tthis.sourceNode = null;\n\t\t\t}\n\t\t}\n\n\t\tpublic getVolume():number {\n\t\t\treturn this.volume;\n\t\t}\n\n\t\tpublic setVolume(volume:number):void {\n\t\t\tCmd.stop(this.volumeTween);\n\t\t\tif (this.volume == volume) return;\n\t\t\tthis.volume = volume;\n\t\t\tthis.applyVolume();\n\t\t}\n\n\t\tpublic fadeTo(to:number, duration:number = 1000, onComplete:Function = null):void {\n\t\t\tCmd.stop(this.volumeTween);\n\t\t\tthis.volumeTween = new cmd.Tween(this, { volume: to }, null, duration, Easing.linear, null, ():void => {\n\t\t\t\tthis.applyVolume();\n\t\t\t}, ():void => {\n\t\t\t\tif (onComplete) onComplete();\n\t\t\t});\n\t\t\tthis.volumeTween.execute();\n\t\t}\n\n\t\tpublic fadeIn(duration:number = 1000):void {\n\t\t\tthis.fadeTo(1, duration);\n\t\t}\n\n\t\tpublic fadeOut(duration:number = 1000, stopOnComplete:boolean = true):void {\n\t\t\tthis.fadeTo(0, duration, ():void => {\n\t\t\t\tif (stopOnComplete) {\n\t\t\t\t\tthis.stop();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tprivate applyVolume():void {\n\t\t\tthis.gainNode.gain.value = this.volume * this.masterVolume;\n\t\t}\n\n\t\tpublic getIsAvailable():boolean {\n\t\t\treturn this.isAvailable;\n\t\t}\n\n\t\tpublic getDuration():number {\n\t\t\treturn this.duration;\n\t\t}\n\n\t\tpublic getCurrentTime():number {\n\t\t\treturn this.context.currentTime;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate isAvailable:boolean;\n\t\tprivate context:AudioContext;\n\t\tprivate volume:number;\n\t\tprivate masterVolume:number;\n\t\tprivate buffer:AudioBuffer;\n\t\tprivate duration:number;\n\t\tprivate sourceNode:AudioBufferSourceNode;\n\t\tprivate gainNode:GainNode;\n\t\tprivate volumeTween:cmd.Tween;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.audio {\n\n\timport Num = alm.util.Num;\n\timport Easing = alm.math.Easing;\n\n\texport class FootstepAudio {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic constructor(intervalMin:number = 0.12, intervalMax:number = 0.6) {\n\t\t\tthis.audioPlayer = AudioPlayer.getInstance();\n\n\t\t\tthis.intervalMin = intervalMin;\n\t\t\tthis.intervalMax = intervalMax;\n\t\t\tthis.intervalId = -1;\n\t\t\tthis.interval = this.intervalMax;\n\n\t\t\tthis.clipIndex = -1;\n\t\t\tthis.clipCount = 0;\n\t\t\tthis.clipIds = [];\n\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.volume = 1;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic add(url:string, masterVolume:number = 1):void {\n\t\t\tconst id = url + '-' + this.clipCount;\n\t\t\tthis.audioPlayer.add(url, masterVolume, id);\n\t\t\tthis.clipIds.push(id);\n\t\t\tthis.clipCount = this.clipIds.length;\n\t\t}\n\n\t\tpublic play(immediately:boolean = true):void {\n\t\t\tif (this.isPlaying) return;\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.isWaitingForFirstStep = true;\n\t\t\tthis.startTime = immediately ? 0 : new Date().getTime();\n\t\t\tthis.intervalId = window.setInterval(this.timerHandler, 1000 / 60);\n\t\t\tthis.timerHandler();\n\t\t}\n\n\t\tpublic stop():void {\n\t\t\tif (!this.isPlaying) return;\n\t\t\tthis.isPlaying = false;\n\n\t\t\twindow.clearInterval(this.intervalId);\n\t\t}\n\n\t\tpublic setSpeed(speedRatio:number):void {\n\t\t\tthis.interval = Num.ease(speedRatio, 0, 1, this.intervalMax, this.intervalMin, Easing.easeOutSine);\n\t\t}\n\n\t\tpublic setVolume(volume:number):void {\n\t\t\tthis.volume = volume;\n\t\t}\n\n\t\tprivate timerHandler = ():void => {\n\t\t\tconst interval = this.isWaitingForFirstStep ? (this.interval * 0.5) : this.interval;\n\t\t\tconst time = new Date().getTime();\n\t\t\tif (time - this.startTime >= interval * 1000) {\n\t\t\t\tthis.startTime = time;\n\t\t\t\tthis.isWaitingForFirstStep = false;\n\n\t\t\t\tif (++this.clipIndex >= this.clipCount) {\n\t\t\t\t\tthis.clipIndex = 0;\n\t\t\t\t}\n\t\t\t\tconst clipId = this.clipIds[this.clipIndex];\n\t\t\t\tthis.audioPlayer.getClip(clipId).setVolume(this.volume);\n\t\t\t\tthis.audioPlayer.getClip(clipId).play(false, true);\n\t\t\t}\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate audioPlayer:AudioPlayer;\n\t\tprivate volume:number;\n\n\t\tprivate clipIds:string[];\n\t\tprivate clipIndex:number;\n\t\tprivate clipCount:number;\n\n\t\tprivate startTime:number;\n\t\tprivate isWaitingForFirstStep:boolean;\n\n\t\tprivate intervalMin:number;\n\t\tprivate intervalMax:number;\n\t\tprivate interval:number;\n\t\tprivate intervalId:number;\n\n\t\tprivate isPlaying:boolean;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.audio {\n\n\timport EventDispatcher = alm.event.EventDispatcher;\n\timport Hash = alm.util.Hash;\n\n\texport class AudioPlayer extends EventDispatcher {\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate constructor() {\n\t\t\tsuper();\n\n\t\t\tconst AudioContext:any = window['AudioContext'] || window['webkitAudioContext'] || null;\n\t\t\tthis.isAvailable = AudioContext != null;\n\t\t\tif (this.isAvailable) {\n\t\t\t\tthis.context = new AudioContext();\n\t\t\t\tthis.clipsById = {};\n\n\t\t\t\tthis.masterGainNode = this.context.createGain();\n\t\t\t\tthis.masterGainNode.connect(this.context.destination);\n\t\t\t\tthis.masterVolume = 1;\n\t\t\t}\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic add(url:string, masterVolute:number = 1, id:string = ''):boolean {\n\t\t\tif (!this.isAvailable) return false;\n\t\t\tif (id == '') id = url;\n\t\t\tif (this.clipsById[id]) return false;\n\t\t\tthis.clipsById[id] = new AudioClip(this.context, this.masterGainNode, url, masterVolute);\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic getClip(id:string):AudioClip {\n\t\t\tif (!this.isAvailable) return;\n\t\t\treturn this.clipsById[id];\n\t\t}\n\n\t\tpublic getMasterVolume():number {\n\t\t\tif (!this.isAvailable) return 0;\n\t\t\treturn this.masterVolume;\n\t\t}\n\n\t\tpublic setMasterVolume(volume:number):void {\n\t\t\tif (!this.isAvailable) return;\n\t\t\tthis.masterVolume = volume;\n\t\t\tthis.masterGainNode.gain.value = this.masterVolume;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic static getInstance():AudioPlayer { return AudioPlayer.instance || (AudioPlayer.instance = new AudioPlayer()); }\n\t\tprivate static instance:AudioPlayer = null;\n\n\t\tprivate isAvailable:boolean;\n\t\tprivate context:AudioContext;\n\t\tprivate clipsById:Hash<AudioClip>;\n\n\t\tprivate masterGainNode:GainNode;\n\t\tprivate masterVolume:number;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.audio {\n\n\texport class CrossOverLoopAudio {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic constructor(crossOverDuration:number = 1) {\n\t\t\tthis.audioPlayer = AudioPlayer.getInstance();\n\n\t\t\tthis.clipCount = 0;\n\t\t\tthis.clipIndex = 0;\n\t\t\tthis.clipIds = [];\n\t\t\tthis.clip = null;\n\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.volume = 1;\n\n\t\t\tthis.crossOverDuration = crossOverDuration;\n\t\t\tthis.timeoutId = -1;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic add(url:string, masterVolume:number = 1):void {\n\t\t\tconst id = url + '-' + this.clipCount;\n\t\t\tthis.audioPlayer.add(url, masterVolume, id);\n\t\t\tthis.clipIds.push(id);\n\t\t\tthis.clipCount = this.clipIds.length;\n\t\t}\n\n\t\tpublic play():void {\n\t\t\tif (this.isPlaying) return;\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.playCurrent();\n\t\t}\n\n\t\tpublic stop():void {\n\t\t\tif (!this.isPlaying) return;\n\t\t\tthis.isPlaying = false;\n\n\t\t\tthis.stopCurrent();\n\t\t}\n\n\t\tpublic setVolume(volume:number):void {\n\t\t\tthis.volume = volume;\n\n\t\t\tif (this.clip) {\n\t\t\t\tthis.clip.setVolume(this.volume);\n\t\t\t}\n\t\t}\n\n\t\tprivate playCurrent():void {\n\t\t\tthis.clip = this.audioPlayer.getClip(this.clipIds[this.clipIndex]);\n\t\t\tthis.clip.setVolume(this.volume);\n\t\t\tthis.clip.play(false, true);\n\n\t\t\tconst interval = (this.clip.getDuration() - this.crossOverDuration) * 1000;\n\t\t\tthis.timeoutId = window.setTimeout(this.timerHandler, interval);\n\t\t}\n\n\t\tprivate stopCurrent():void {\n\t\t\tif (this.timeoutId != -1) {\n\t\t\t\twindow.clearTimeout(this.timeoutId);\n\t\t\t\tthis.timeoutId = -1;\n\t\t\t}\n\n\t\t\tif (this.clip) {\n\t\t\t\tthis.clip.stop();\n\t\t\t\tthis.clip = null;\n\t\t\t}\n\t\t}\n\n\t\tprivate timerHandler = ():void => {\n\t\t\tif (++this.clipIndex == this.clipCount) this.clipIndex = 0;\n\t\t\tthis.playCurrent();\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate audioPlayer:AudioPlayer;\n\t\tprivate volume:number;\n\n\t\tprivate clipIds:string[];\n\t\tprivate clip:AudioClip;\n\t\tprivate clipIndex:number;\n\t\tprivate clipCount:number;\n\n\t\tprivate isPlaying:boolean;\n\n\t\tprivate crossOverDuration:number;\n\t\tprivate timeoutId:number;\n\t}\n}\n"]}