{"version":3,"sources":["../src/alumican.canvas/alm/canvas/BaseApp.ts","../src/alumican.canvas/alm/canvas/Pointer.ts","../src/alumican.canvas/index.ts"],"names":[],"mappings":"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","file":"index.d.ts","sourcesContent":["/// <reference path=\"../../index.ts\" />\n\nnamespace alm.canvas {\n\n\timport EventDispatcher = alm.event.EventDispatcher;\n\timport DeviceInfo = alm.browser.DeviceInfo;\n\timport AnimationFrameTicker = alm.time.AnimationFrameTicker;\n\timport Time = alm.util.Time;\n\n\texport abstract class BaseApp extends EventDispatcher {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(canvas:HTMLElement, isAutoResizeEnabled:boolean = true, isAutoUpdateEnabled:boolean = true, platformSetupOptions:any[] = null) {\n\t\t\tsuper();\n\n\t\t\tthis.window = jQuery(window);\n\n\t\t\tthis.canvas = <JQuery<HTMLCanvasElement>>jQuery(canvas);\n\t\t\tthis.isAutoResizeEnabled = isAutoResizeEnabled;\n\t\t\tthis.isAutoUpdateEnabled = isAutoUpdateEnabled;\n\t\t\tthis.isDefaultTouchEventEnabled = false;\n\n\t\t\tthis.pointerIds = [];\n\t\t\tthis.pointersById = {};\n\t\t\tthis.pointingCount = 0;\n\n\t\t\tthis.elapsedFrameCount = 0;\n\t\t\tthis.startTime = Time.now();\n\t\t\tthis.mousePointerId = 'mouse';\n\t\t\tthis.isTouchEnabled = DeviceInfo.getIsTouchEnabled();\n\t\t\tthis.isForceTouchEnabled = typeof canvas['ontouchforcechange'] !== 'undefined';\n\t\t\tthis.visibilityState = document.visibilityState;\n\n\t\t\ttrace(\"[BaseApp] canvas : \", canvas);\n\t\t\ttrace(\"[BaseApp] platformSetupOptions : \", platformSetupOptions);\n\t\t\ttrace(\"[BaseApp] isAutoResizeEnabled : \" + this.isAutoResizeEnabled);\n\t\t\ttrace(\"[BaseApp] isAutoUpdateEnabled : \" + this.isAutoUpdateEnabled);\n\t\t\ttrace(\"[BaseApp] isTouchEnabled : \" + this.isTouchEnabled);\n\t\t\ttrace(\"[BaseApp] isForceTouchEnabled : \" + this.isForceTouchEnabled);\n\n\t\t\tif (this.isTouchEnabled) {\n\t\t\t\tthis.canvas.on('touchstart', this.touchStartHandler);\n\t\t\t\tthis.canvas.on('touchend', this.touchEndHandler);\n\t\t\t\tthis.canvas.on('touchcancel', this.touchCancelHandler);\n\t\t\t\tthis.canvas.on('touchmove', this.touchMoveHandler);\n\t\t\t\tif (this.isForceTouchEnabled) {\n\t\t\t\t\tthis.canvas.on('touchforcechange', this.touchForceChangeHandler);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.canvas.on('mouseover', this.mouseOverHandler);\n\t\t\t\tthis.canvas.on('mouseout', this.mouseOutHandler);\n\t\t\t\tthis.canvas.on('mousedown', this.mouseDownHandler);\n\t\t\t\tthis.canvas.on('mouseup', this.mouseUpHandler);\n\t\t\t\tthis.canvas.on('mousemove', this.mouseMoveHandler);\n\t\t\t}\n\n\t\t\tthis.window.on('keydown', this.keyDownHandler);\n\t\t\tthis.window.on('keyup', this.keyUpHandler);\n\t\t\t//this.canvas.attr('tabindex', 1);\n\n\t\t\tjQuery(document).on('visibilitychange', this.visibilityStateChangeHandler);\n\n\t\t\tif (this.isAutoUpdateEnabled) {\n\t\t\t\t//this.animationFrameTicker = new AnimationFrameTicker();\n\t\t\t\t//this.animationFrameTicker.addEventListener(AnimationFrameTickerEvent.TICK, this.animationFrameTickerTickHandler);\n\t\t\t\t//this.animationFrameTicker.start();\n\t\t\t\twindow.requestAnimationFrame(this.requestAnimationFrameHandler);\n\t\t\t}\n\n\t\t\tthis.onPlatformSetup(platformSetupOptions || []);\n\t\t\tthis.onSetup();\n\n\t\t\tif (this.isAutoResizeEnabled) {\n\t\t\t\tthis.window.on('resize', this.resizeHandler);\n\t\t\t\tthis.resizeHandler(null);\n\t\t\t}\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic onSetup():void {\n\t\t}\n\n\t\tpublic onUpdate():void {\n\t\t}\n\n\t\tpublic onPointerEnter(pointer:Pointer):void {\n\t\t}\n\n\t\tpublic onPointerLeave(pointer:Pointer,):void {\n\t\t}\n\n\t\tpublic onPointerTouch(pointer:Pointer):void {\n\t\t}\n\n\t\tpublic onPointerRelease(pointer:Pointer):void {\n\t\t}\n\n\t\tpublic onPointerMove(pointer:Pointer):void {\n\t\t}\n\n\t\tpublic onPointerDrag(pointer:Pointer):void {\n\t\t}\n\n\t\tpublic onPointerTouchForceChange(pointer:Pointer):void {\n\t\t}\n\n\t\tpublic onKeyDown(key:string):void {\n\t\t}\n\n\t\tpublic onKeyUp(key:string):void {\n\t\t}\n\n\t\tpublic onResize(stageWidth:number, stageHeight:number):void {\n\t\t}\n\n\t\tpublic onVisibilityStateChange(visibilityState:VisibilityState):void {\n\t\t}\n\n\t\tprotected onPlatformSetup(platformSetupOptions:any[]):void {\n\t\t}\n\n\t\tprotected onPlatformRender():void {\n\t\t}\n\n\t\tprotected onPlatformResize(stageWidth:number, stageHeight:number):void {\n\t\t}\n\n\t\tpublic update():void {\n\t\t\t++this.elapsedFrameCount;\n\t\t\tthis.elapsedTime = (Time.now() - this.startTime) / 1000;\n\t\t\tthis.onUpdate();\n\t\t\tthis.onPlatformRender();\n\t\t}\n\n\t\tpublic resize(width:number, height:number):void {\n\t\t\tthis.stageWidth = width;\n\t\t\tthis.stageHeight = height;\n\t\t\ttrace('[BaseApp] resize : width = ' + this.stageWidth + ', height = ' + this.stageHeight);\n\t\t\tthis.onPlatformResize(this.stageWidth, this.stageHeight);\n\t\t\tthis.onResize(this.stageWidth, this.stageHeight);\n\t\t}\n\n\t\t// --------------------------------------------------\n\t\t// Mouse Event\n\n\t\tprivate mouseOverHandler = (event:JQuery.MouseOverEvent):void => {\n\t\t\tconst pointer:Pointer = this.getMousePointer(event);\n\t\t};\n\n\t\tprivate mouseOutHandler = (event:JQuery.MouseOutEvent):void => {\n\t\t\tconst pointer:Pointer = this.getMousePointer(event);\n\t\t\tdelete this.pointersById[this.mousePointerId];\n\t\t\tconst pointerIndex = this.pointerIds.indexOf(this.mousePointerId);\n\t\t\tif (pointerIndex != -1) {\n\t\t\t\tthis.pointerIds.splice(pointerIndex, 1);\n\t\t\t}\n\t\t\t--this.pointingCount;\n\t\t\tpointer.notifyLeave();\n\t\t\tthis.onPointerLeave(pointer);\n\t\t};\n\n\t\tprivate mouseDownHandler = (event:JQuery.MouseDownEvent):void => {\n\t\t\tconst pointer:Pointer = this.getMousePointer(event);\n\t\t\tpointer.notifyTouch();\n\t\t\tthis.onPointerTouch(pointer);\n\t\t};\n\n\t\tprivate mouseUpHandler = (event:JQuery.MouseUpEvent):void => {\n\t\t\tconst pointer:Pointer = this.getMousePointer(event);\n\t\t\tpointer.notifyRelease();\n\t\t\tthis.onPointerRelease(pointer);\n\t\t};\n\n\t\tprivate mouseMoveHandler = (event:JQuery.MouseMoveEvent):void => {\n\t\t\tconst pointer:Pointer = this.getMousePointer(event);\n\t\t\tconst position:number[] = this.getMousePointerPosition(event);\n\t\t\tpointer.notifyMove(position[0], position[1]);\n\t\t\tthis.onPointerMove(pointer);\n\t\t\tif (pointer.isDragging) {\n\t\t\t\tthis.onPointerDrag(pointer);\n\t\t\t}\n\t\t};\n\n\t\t// --------------------------------------------------\n\t\t// Touch Event\n\n\t\tprivate touchStartHandler = (event:JQuery.TouchEventBase):void => {\n\t\t\tconst originalEvent:TouchEvent = event.originalEvent;\n\t\t\tconst touches:TouchList = originalEvent.changedTouches;\n\t\t\tconst touchCount:number = originalEvent.changedTouches.length;\n\t\t\tlet touch:Touch;\n\t\t\tlet id:string;\n\t\t\tlet pointer:Pointer;\n\t\t\tfor (let i:number = 0; i < touchCount; ++i) {\n\t\t\t\ttouch = touches.item(i);\n\t\t\t\tid = BaseApp.getPointerId(touch.identifier);\n\t\t\t\tpointer = new Pointer(id);\n\t\t\t\tthis.pointersById[id] = pointer;\n\t\t\t\tthis.pointerIds.push(id);\n\t\t\t\t++this.pointingCount;\n\t\t\t\tconst position:number[] = this.getTouchPointerPosition(touch);\n\t\t\t\tpointer.notifyEnter(position[0], position[1]);\n\t\t\t\tpointer.notifyTouch();\n\t\t\t\tthis.onPointerEnter(pointer);\n\t\t\t\tthis.onPointerTouch(pointer);\n\t\t\t}\n\t\t};\n\n\t\tprivate touchEndHandler = (event:JQuery.TouchEventBase):void => {\n\t\t\tconst originalEvent:TouchEvent = event.originalEvent;\n\t\t\tconst touches:TouchList = originalEvent.changedTouches;\n\t\t\tconst touchCount:number = originalEvent.changedTouches.length;\n\t\t\tlet touch:Touch;\n\t\t\tlet id:string;\n\t\t\tlet pointer:Pointer;\n\t\t\tfor (let i:number = 0; i < touchCount; ++i) {\n\t\t\t\ttouch = touches.item(i);\n\t\t\t\tid = BaseApp.getPointerId(touch.identifier);\n\t\t\t\tpointer = this.pointersById[id];\n\t\t\t\tdelete this.pointersById[id];\n\t\t\t\tconst pointerIndex = this.pointerIds.indexOf(id);\n\t\t\t\tif (pointerIndex != -1) {\n\t\t\t\t\tthis.pointerIds.splice(pointerIndex, 1);\n\t\t\t\t}\n\t\t\t\t--this.pointingCount;\n\t\t\t\tpointer.notifyRelease();\n\t\t\t\tpointer.notifyLeave();\n\t\t\t\tthis.onPointerRelease(pointer);\n\t\t\t\tthis.onPointerLeave(pointer);\n\t\t\t}\n\t\t};\n\n\t\tprivate touchCancelHandler = (event:JQuery.TouchEventBase):void => {\n\t\t\tthis.touchEndHandler(event);\n\t\t};\n\n\t\tprivate touchMoveHandler = (event:JQuery.TouchEventBase):void => {\n\t\t\tif (!this.isDefaultTouchEventEnabled) {\n\t\t\t\tevent.originalEvent.preventDefault();\n\t\t\t}\n\n\t\t\tconst originalEvent:TouchEvent = event.originalEvent;\n\t\t\tconst touches:TouchList = originalEvent.changedTouches;\n\t\t\tconst touchCount:number = originalEvent.changedTouches.length;\n\t\t\tlet touch:Touch;\n\t\t\tlet id:string;\n\t\t\tlet pointer:Pointer;\n\t\t\tfor (let i:number = 0; i < touchCount; ++i) {\n\t\t\t\ttouch = touches.item(i);\n\t\t\t\tid = BaseApp.getPointerId(touch.identifier);\n\t\t\t\tpointer = this.pointersById[id];\n\t\t\t\tconst position:number[] = this.getTouchPointerPosition(touch);\n\t\t\t\tpointer.notifyMove(position[0], position[1]);\n\t\t\t\tif (pointer.isDragging) {\n\t\t\t\t\tthis.onPointerDrag(pointer);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprivate touchForceChangeHandler = (event:JQuery.TouchEventBase):void => {\n\t\t\tconst originalEvent:TouchEvent = event.originalEvent;\n\t\t\tconst touches:TouchList = originalEvent.changedTouches;\n\t\t\tconst touchCount:number = originalEvent.changedTouches.length;\n\t\t\tlet touch:Touch;\n\t\t\tlet id:string;\n\t\t\tlet pointer:Pointer;\n\t\t\tfor (let i:number = 0; i < touchCount; ++i) {\n\t\t\t\ttouch = touches.item(i);\n\t\t\t\tid = BaseApp.getPointerId(touch.identifier);\n\t\t\t\tpointer = this.pointersById[id];\n\t\t\t\tif (pointer) {\n\t\t\t\t\tpointer.notifyTouchForce(touch.force);\n\t\t\t\t\tthis.onPointerTouchForceChange(pointer);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// --------------------------------------------------\n\t\t// Key Event\n\n\t\tprivate keyDownHandler = (event:JQuery.KeyDownEvent):void => {\n\t\t\tthis.onKeyDown(event.key);\n\t\t};\n\n\t\tprivate keyUpHandler = (event:JQuery.KeyUpEvent):void => {\n\t\t\tthis.onKeyUp(event.key);\n\t\t};\n\n\t\t// --------------------------------------------------\n\t\t// Other Event\n\n\t\t//private animationFrameTickerTickHandler = (event:AnimationFrameTickerEvent):void => {\n\t\t//\tthis.update();\n\t\t//};\n\n\t\tprivate requestAnimationFrameHandler = ():void => {\n\t\t\tthis.update();\n\t\t\twindow.requestAnimationFrame(this.requestAnimationFrameHandler);\n\t\t};\n\n\t\tprivate resizeHandler = (event:JQuery.ResizeEvent):void => {\n\t\t\tconst newStageWidth:number = this.canvas.width();\n\t\t\tconst newStageHeight:number = this.canvas.height();\n\t\t\tif (this.stageWidth != newStageWidth || this.stageHeight != newStageHeight) {\n\t\t\t\tthis.resize(newStageWidth, newStageHeight);\n\t\t\t}\n\t\t};\n\n\t\tprivate visibilityStateChangeHandler = (event:JQuery.Event):void => {\n\t\t\tthis.visibilityState = document.visibilityState;\n\t\t\tthis.onVisibilityStateChange(this.visibilityState);\n\t\t};\n\n\t\t// --------------------------------------------------\n\t\t// Util\n\n\t\tprivate getMousePointer(event:JQuery.Event):Pointer {\n\t\t\tlet pointer:Pointer = this.pointersById[this.mousePointerId];\n\t\t\tif (pointer == null) {\n\t\t\t\tpointer = new Pointer(this.mousePointerId);\n\t\t\t\tthis.pointersById[this.mousePointerId] = pointer;\n\t\t\t\tthis.pointerIds.push(this.mousePointerId);\n\t\t\t\t++this.pointingCount;\n\t\t\t\tconst position:number[] = this.getMousePointerPosition(event);\n\t\t\t\tpointer.notifyEnter(position[0], position[1]);\n\t\t\t\tthis.onPointerEnter(pointer);\n\t\t\t}\n\t\t\treturn pointer;\n\t\t}\n\n\t\tprivate getTouchPointerPosition(touch:Touch):number[] {\n\t\t\tconst offset:JQuery.Coordinates = this.getCanvas().offset();\n\t\t\t//trace(touch, touch.clientX, touch.clientY, touch.pageX, touch.pageY, offset.left, offset.top);\n\t\t\treturn [touch.pageX - offset.left, touch.pageY - offset.top];\n\t\t}\n\n\t\tprivate getMousePointerPosition(event:JQuery.Event):number[] {\n\t\t\tconst offset:JQuery.Coordinates = this.getCanvas().offset();\n\t\t\treturn [event.pageX - offset.left, event.pageY - offset.top];\n\t\t}\n\n\t\tpublic static getPointerId(touchId:number):string {\n\t\t\treturn 'touch_' + touchId;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic getPointerIds():string[] { return this.pointerIds; }\n\t\tprivate pointerIds:string[];\n\n\t\tpublic getFirstPointer():Pointer { return this.pointingCount > 0 ? this.getPointerById(this.pointerIds[0]) : null; }\n\t\tpublic getLastPointer():Pointer { return this.pointingCount > 0 ? this.getPointerById(this.pointerIds[this.pointingCount - 1]) : null; }\n\n\t\tpublic getPointerById(id:string):Pointer { return this.pointersById[id]; }\n\t\tprivate pointersById:alm.util.Hash<Pointer>;\n\n\t\tpublic getPointingCount():number { return this.pointingCount; }\n\t\tprivate pointingCount:number;\n\n\t\tpublic getStageWidth():number { return this.stageWidth; }\n\t\tprivate stageWidth:number;\n\n\t\tpublic getStageHeight():number { return this.stageHeight; }\n\t\tprivate stageHeight:number;\n\n\t\tpublic getElapsedFrameCount():number { return this.elapsedFrameCount; }\n\t\tprivate elapsedFrameCount:number;\n\n\t\tpublic getElapsedTime():number { return this.elapsedTime; }\n\t\tprivate elapsedTime:number;\n\n\t\tpublic getCanvas():JQuery<HTMLCanvasElement> { return this.canvas; }\n\t\tprivate canvas:JQuery<HTMLCanvasElement>;\n\n\t\tpublic getVisibilityState():VisibilityState { return this.visibilityState; }\n\t\tprivate visibilityState:VisibilityState;\n\n\t\tpublic getIsAutoResizeEnabled():boolean { return this.isAutoResizeEnabled; }\n\t\tprivate isAutoResizeEnabled:boolean;\n\n\t\tpublic getIsAutoUpdateEnabled():boolean { return this.isAutoUpdateEnabled; }\n\t\tprivate isAutoUpdateEnabled:boolean;\n\n\t\tpublic getIsForceTouchEnabled():boolean { return this.isForceTouchEnabled; }\n\t\tprivate isForceTouchEnabled:boolean;\n\n\t\tpublic getIsTouchEnabled():boolean { return this.isTouchEnabled; }\n\t\tprivate isTouchEnabled:boolean;\n\n\t\tpublic getIsDefaultTouchEventEnabled():boolean { return this.isDefaultTouchEventEnabled; }\n\t\tpublic setIsDefaultTouchEventEnabled(value:boolean):void { this.isDefaultTouchEventEnabled = value; }\n\t\tprivate isDefaultTouchEventEnabled:boolean;\n\n\t\tprivate startTime:number;\n\t\tprivate mousePointerId:string;\n\t\tprivate window:JQuery<Window>;\n\t\tprivate animationFrameTicker:AnimationFrameTicker;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.canvas {\n\n\texport class Pointer {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(id:string) {\n\t\t\tthis.id = id;\n\n\t\t\tthis.isHovering = false;\n\t\t\tthis.isTouching = false;\n\t\t\tthis.isDragging = false;\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\n\t\t\tthis.prevX = 0;\n\t\t\tthis.prevY = 0;\n\n\t\t\tthis.dragX = 0;\n\t\t\tthis.dragY = 0;\n\n\t\t\tthis.velocityX = 0;\n\t\t\tthis.velocityY = 0;\n\n\t\t\tthis.touchBeginX = 0;\n\t\t\tthis.touchBeginY = 0;\n\n\t\t\tthis.touchForce = 0;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic notifyEnter(x:number, y:number):void {\n\t\t\tthis.prevX = this.x = x;\n\t\t\tthis.prevY = this.y = y;\n\t\t\tthis.isHovering = true;\n\t\t}\n\n\t\tpublic notifyLeave():void {\n\t\t\tthis.isHovering = false;\n\t\t}\n\n\t\tpublic notifyTouch():void {\n\t\t\tthis.isTouching = true;\n\t\t\tthis.touchBeginX = this.x;\n\t\t\tthis.touchBeginY = this.y;\n\t\t}\n\n\t\tpublic notifyRelease():void {\n\t\t\tthis.isTouching = false;\n\t\t\tthis.isDragging = false;\n\t\t\tthis.dragX = 0;\n\t\t\tthis.dragY = 0;\n\t\t}\n\n\t\tpublic notifyMove(x:number, y:number):void {\n\t\t\tthis.prevX = this.x;\n\t\t\tthis.prevY = this.y;\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\tthis.velocityX = this.x - this.prevX;\n\t\t\tthis.velocityY = this.y - this.prevY;\n\n\t\t\tif (this.isTouching) {\n\t\t\t\tthis.isDragging = true;\n\t\t\t}\n\n\t\t\tif (this.isDragging) {\n\t\t\t\tthis.dragX = this.x - this.touchBeginX;\n\t\t\t\tthis.dragY = this.y - this.touchBeginY;\n\t\t\t}\n\t\t}\n\n\t\tpublic notifyTouchForce(force:number):void {\n\t\t\tthis.touchForce = force;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic id:string;\n\t\tpublic isHovering:boolean;\n\t\tpublic isTouching:boolean;\n\t\tpublic isDragging:boolean;\n\n\t\tpublic x:number;\n\t\tpublic y:number;\n\n\t\tpublic prevX:number;\n\t\tpublic prevY:number;\n\n\t\tpublic dragX:number;\n\t\tpublic dragY:number;\n\n\t\tpublic velocityX:number;\n\t\tpublic velocityY:number;\n\n\t\tpublic touchBeginX:number;\n\t\tpublic touchBeginY:number;\n\n\t\tpublic touchForce:number;\n\t}\n}\n","/* ---------- project dependencies ---------- */\n\n/// <reference types='jquery' />\n/// <reference types='alumican' />\n\n\n/* ---------- project scripts ---------- */\n\n/// <reference path='alm/canvas/BaseApp.ts' />\n/// <reference path='alm/canvas/Pointer.ts' />\n"]}