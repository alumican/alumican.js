{"version":3,"sources":["../src/alumican.unlock_gesture/alm/unlock_gesture/UnlockGesture.ts","../src/alumican.unlock_gesture/alm/unlock_gesture/UnlockGestureEvent.ts","../src/alumican.unlock_gesture/alm/unlock_gesture/UnlockGestureProgressEvent.ts","../src/alumican.unlock_gesture/index.ts"],"names":[],"mappings":";AAEA,kBAAU,GAAG,CAAC,cAAc,CAAC;IAI5B,OAAO,eAAe,GAAG,GAAG,CAAC,KAAK,CAAC,eAAe,CAAC;IAGnD,MAAa,aAAc,SAAQ,eAAe;oBAQrC,UAAS,WAAW,EAAE,EAAE,gBAAc,MAAc,EAAE,UAAQ,WAAW,GAAC,MAAe;QA2B9F,cAAc,CAAC,uBAAqB,uBAA8B,GAAE,IAAI;QAQxE,aAAa,CAAC,uBAAqB,oBAA2B,GAAE,IAAI;QAOpE,KAAK,IAAG,IAAI;QASnB,OAAO,CAAC,wBAAwB,CAiC9B;QAEF,OAAO,CAAC,yBAAyB,CAG/B;QAYF,OAAO,CAAC,SAAS,CAAS;QAC1B,OAAO,CAAC,OAAO,CAAoB;QACnC,OAAO,CAAC,eAAe,CAAe;QACtC,OAAO,CAAC,YAAY,CAAe;QACnC,OAAO,CAAC,UAAU,CAAQ;QAC1B,OAAO,CAAC,SAAS,CAAQ;QACzB,OAAO,CAAC,YAAY,CAAQ;QAC5B,OAAO,CAAC,UAAU,CAAO;QACzB,OAAO,CAAC,aAAa,CAAQ;KAC7B;CACD;AC9HD,kBAAU,GAAG,CAAC,cAAc,CAAC;IAE5B,MAAa,kBAAmB,SAAQ,GAAG,CAAC,KAAK,CAAC,KAAK;QAEtD,gBAAuB,QAAQ,EAAC,MAAM,CAAiC;QACvE,gBAAuB,OAAO,EAAC,MAAM,CAAgC;QACrE,gBAAuB,KAAK,EAAC,MAAM,CAA8B;oBAYrD,WAAU,MAAM,EAAE,QAAO,MAAM;KAuB3C;CACD;AC1CD,kBAAU,GAAG,CAAC,cAAc,CAAC;IAE5B,MAAa,0BAA2B,SAAQ,GAAG,CAAC,KAAK,CAAC,KAAK;QAE9D,gBAAuB,QAAQ,EAAC,MAAM,CAAyC;oBAYnE,WAAU,MAAM,EAAE,QAAO,MAAM,EAAE,SAAQ,MAAM,EAAE,OAAM,MAAM;QA0BzE,SAAgB,OAAO,EAAC,MAAM,CAAC;QAC/B,SAAgB,KAAK,EAAC,MAAM,CAAC;KAC7B;CACD","file":"index.d.ts","sourcesContent":["/// <reference path=\"../../index.ts\" />\n\nnamespace alm.unlock_gesture {\n\n\timport Timer = alm.time.Timer;\n\timport TimerEvent = alm.time.TimerEvent;\n\timport EventDispatcher = alm.event.EventDispatcher;\n\timport Dom = alm.util.Dom;\n\n\texport class UnlockGesture extends EventDispatcher {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(commands:HTMLElement[], resetDuration:number = 10000, hitArea:HTMLElement|Window = window) {\n\t\t\tsuper();\n\n\t\t\tthis.isRunning = false;\n\n\t\t\tthis.defaultCommands = commands.concat();\n\t\t\tthis.totalCount = this.defaultCommands.length;\n\n\t\t\tthis.resetDuration = resetDuration;\n\t\t\tthis.resetTimer = new Timer(this.resetDuration, 1);\n\t\t\tthis.resetTimer.addEventListener(TimerEvent.complete, this.resetTimerCompleteHandler);\n\n\t\t\tthis.hitArea = hitArea;\n\n\t\t\tthis.reset();\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic startObserving(eventListenerOptions:AddEventListenerOptions = null):void {\n\t\t\tif (this.isRunning) return;\n\t\t\tthis.isRunning = true;\n\n\t\t\tDom.addPointerDownListener(this.hitArea, this.windowPointerDownHandler, eventListenerOptions);\n\t\t\tthis.reset();\n\t\t}\n\n\t\tpublic stopObserving(eventListenerOptions:EventListenerOptions = null):void {\n\t\t\tif (!this.isRunning) return;\n\t\t\tthis.isRunning = false;\n\n\t\t\tDom.removePointerDownListener(this.hitArea, this.windowPointerDownHandler, eventListenerOptions);\n\t\t}\n\n\t\tpublic reset():void {\n\t\t\ttrace('[UnlockGesture] reset');\n\t\t\tthis.restCommands = this.defaultCommands.concat();\n\t\t\tthis.resetTimer.reset();\n\t\t\tthis.restCount = this.totalCount;\n\t\t\tthis.currentCount = 0;\n\t\t\tthis.dispatchEvent(new UnlockGestureEvent(UnlockGestureEvent.reset, this));\n\t\t}\n\n\t\tprivate windowPointerDownHandler = (event:PointerEvent):void => {\n\t\t\tconst command = this.restCommands[0];\n\t\t\tconst targetBounds = command.getBoundingClientRect();\n\t\t\tconst pointerX = event.clientX;\n\t\t\tconst pointerY = event.clientY;\n\n\t\t\tif ((pointerX >= targetBounds.left) && (pointerY >= targetBounds.top) && (pointerX <= targetBounds.right) && (pointerY <= targetBounds.bottom)) {\n\t\t\t\tthis.restCommands.shift();\n\t\t\t\tthis.restCount = this.restCommands.length;\n\t\t\t\tthis.totalCount = this.defaultCommands.length;\n\t\t\t\tthis.currentCount = this.totalCount - this.restCount;\n\n\t\t\t\tif (this.currentCount == 1) {\n\t\t\t\t\ttrace('[UnlockGesture] reset timer : start');\n\t\t\t\t\tthis.resetTimer.start();\n\t\t\t\t}\n\n\t\t\t\tif (this.restCount > 0) {\n\t\t\t\t\ttrace('[UnlockGesture] ok :', this.currentCount, '/', this.totalCount);\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureProgressEvent(UnlockGestureProgressEvent.progress, this, this.currentCount, this.totalCount));\n\t\t\t\t} else {\n\t\t\t\t\ttrace('[UnlockGesture] ok : complete');\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureProgressEvent(UnlockGestureProgressEvent.progress, this, this.currentCount, this.totalCount));\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureEvent(UnlockGestureEvent.complete, this));\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif (this.currentCount > 1) {\n\t\t\t\t\ttrace('[UnlockGesture] failure');\n\t\t\t\t\tthis.reset();\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureEvent(UnlockGestureEvent.failure, this));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprivate resetTimerCompleteHandler = (event:TimerEvent):void => {\n\t\t\ttrace('[UnlockGesture] reset time : complete');\n\t\t\tthis.reset();\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate isRunning:boolean;\n\t\tprivate hitArea:HTMLElement|Window;\n\t\tprivate defaultCommands:HTMLElement[];\n\t\tprivate restCommands:HTMLElement[];\n\t\tprivate totalCount:number;\n\t\tprivate restCount:number;\n\t\tprivate currentCount:number;\n\t\tprivate resetTimer:Timer;\n\t\tprivate resetDuration:number;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.unlock_gesture {\n\n\texport class UnlockGestureEvent extends alm.event.Event {\n\n\t\tpublic static readonly complete:string = 'UnlockGestureEvent.complete';\n\t\tpublic static readonly failure:string = 'UnlockGestureEvent.failure';\n\t\tpublic static readonly reset:string = 'UnlockGestureEvent.reset';\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(eventType:string, target:object) {\n\t\t\tsuper(eventType, target);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.unlock_gesture {\n\n\texport class UnlockGestureProgressEvent extends alm.event.Event {\n\n\t\tpublic static readonly progress:string = 'UnlockGestureProgressEvent.progress';\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(eventType:string, target:object, current:number, total:number) {\n\t\t\tsuper(eventType, target);\n\t\t\tthis.current = current;\n\t\t\tthis.total = total;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic readonly current:number;\n\t\tpublic readonly total:number;\n\t}\n}\n","/* ---------- project dependencies ---------- */\n\n/// <reference types='alumican' />\n\n\n/* ---------- project scripts ---------- */\n\n/// <reference path='alm/unlock_gesture/UnlockGesture.ts' />\n/// <reference path='alm/unlock_gesture/UnlockGestureEvent.ts' />\n/// <reference path='alm/unlock_gesture/UnlockGestureProgressEvent.ts' />\n"]}