{"version":3,"sources":["../src/alumican.unlock_gesture/alm/unlock_gesture/UnlockGesture.ts","../src/alumican.unlock_gesture/alm/unlock_gesture/UnlockGestureEvent.ts","../src/alumican.unlock_gesture/alm/unlock_gesture/UnlockGestureProgressEvent.ts","../src/alumican.unlock_gesture/index.ts"],"names":[],"mappings":"AAEA,IAAU,GAAG,CA8HZ;AA9HD,WAAU,GAAG;IAAC,IAAA,cAAc,CA8H3B;IA9Ha,WAAA,cAAc;QAE3B,IAAO,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;QAC9B,IAAO,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;QACxC,IAAO,eAAe,GAAG,GAAG,CAAC,KAAK,CAAC,eAAe,CAAC;QACnD,IAAO,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;QAE1B,MAAa,aAAc,SAAQ,eAAe;YAQjD,YAAY,QAAsB,EAAE,gBAAuB,KAAK,EAAE,UAA6B,MAAM;gBACpG,KAAK,EAAE,CAAC;gBAkDD,6BAAwB,GAAG,CAAC,KAAkB,EAAO,EAAE;oBAC9D,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACrC,MAAM,YAAY,GAAG,OAAO,CAAC,qBAAqB,EAAE,CAAC;oBACrD,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC;oBAC/B,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC;oBAE/B,IAAI,CAAC,QAAQ,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;wBAC/I,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;wBAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;wBAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;wBAC9C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;wBAErD,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,EAAE;4BAC3B,KAAK,CAAC,qCAAqC,CAAC,CAAC;4BAC7C,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;yBACxB;wBAED,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE;4BACvB,KAAK,CAAC,sBAAsB,EAAE,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;4BACvE,IAAI,CAAC,aAAa,CAAC,IAAI,eAAA,0BAA0B,CAAC,eAAA,0BAA0B,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;yBAClI;6BAAM;4BACN,KAAK,CAAC,+BAA+B,CAAC,CAAC;4BACvC,IAAI,CAAC,aAAa,CAAC,IAAI,eAAA,0BAA0B,CAAC,eAAA,0BAA0B,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;4BAClI,IAAI,CAAC,aAAa,CAAC,IAAI,eAAA,kBAAkB,CAAC,eAAA,kBAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;yBAC9E;qBAED;yBAAM;wBACN,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,EAAE;4BAC1B,KAAK,CAAC,yBAAyB,CAAC,CAAC;4BACjC,IAAI,CAAC,KAAK,EAAE,CAAC;4BACb,IAAI,CAAC,aAAa,CAAC,IAAI,eAAA,kBAAkB,CAAC,eAAA,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;yBAC7E;qBACD;gBACF,CAAC,CAAC;gBAEM,8BAAyB,GAAG,CAAC,KAAgB,EAAO,EAAE;oBAC7D,KAAK,CAAC,uCAAuC,CAAC,CAAC;oBAC/C,IAAI,CAAC,KAAK,EAAE,CAAC;gBACd,CAAC,CAAC;gBAtFD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBAEvB,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;gBACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAE9C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;gBACnC,IAAI,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;gBACnD,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;gBAEtF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBAEvB,IAAI,CAAC,KAAK,EAAE,CAAC;YACd,CAAC;YAYM,cAAc,CAAC,uBAA+C,IAAI;gBACxE,IAAI,IAAI,CAAC,SAAS;oBAAE,OAAO;gBAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBAEtB,GAAG,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC;gBAC9F,IAAI,CAAC,KAAK,EAAE,CAAC;YACd,CAAC;YAEM,aAAa,CAAC,uBAA4C,IAAI;gBACpE,IAAI,CAAC,IAAI,CAAC,SAAS;oBAAE,OAAO;gBAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBAEvB,GAAG,CAAC,yBAAyB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC;YAClG,CAAC;YAEM,KAAK;gBACX,KAAK,CAAC,uBAAuB,CAAC,CAAC;gBAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;gBAClD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;gBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;gBACjC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,aAAa,CAAC,IAAI,eAAA,kBAAkB,CAAC,eAAA,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;YAC5E,CAAC;SA6DD;QAtHY,4BAAa,gBAsHzB,CAAA;IACF,CAAC,EA9Ha,cAAc,GAAd,kBAAc,KAAd,kBAAc,QA8H3B;AAAD,CAAC,EA9HS,GAAG,KAAH,GAAG,QA8HZ;AC9HD,IAAU,GAAG,CA0CZ;AA1CD,WAAU,GAAG;IAAC,IAAA,cAAc,CA0C3B;IA1Ca,WAAA,cAAc;QAE3B,MAAa,kBAAmB,SAAQ,GAAG,CAAC,KAAK,CAAC,KAAK;YAgBtD,YAAY,SAAgB,EAAE,MAAa;gBAC1C,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YAC1B,CAAC;;QAhBsB,2BAAQ,GAAU,6BAA6B,CAAC;QAChD,0BAAO,GAAU,4BAA4B,CAAC;QAC9C,wBAAK,GAAU,0BAA0B,CAAC;QAJrD,iCAAkB,qBAuC9B,CAAA;IACF,CAAC,EA1Ca,cAAc,GAAd,kBAAc,KAAd,kBAAc,QA0C3B;AAAD,CAAC,EA1CS,GAAG,KAAH,GAAG,QA0CZ;AC1CD,IAAU,GAAG,CA6CZ;AA7CD,WAAU,GAAG;IAAC,IAAA,cAAc,CA6C3B;IA7Ca,WAAA,cAAc;QAE3B,MAAa,0BAA2B,SAAQ,GAAG,CAAC,KAAK,CAAC,KAAK;YAc9D,YAAY,SAAgB,EAAE,MAAa,EAAE,OAAc,EAAE,KAAY;gBACxE,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;gBACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACpB,CAAC;;QAhBsB,mCAAQ,GAAU,qCAAqC,CAAC;QAFnE,yCAA0B,6BA0CtC,CAAA;IACF,CAAC,EA7Ca,cAAc,GAAd,kBAAc,KAAd,kBAAc,QA6C3B;AAAD,CAAC,EA7CS,GAAG,KAAH,GAAG,QA6CZ","file":"index.js","sourcesContent":["/// <reference path=\"../../index.ts\" />\n\nnamespace alm.unlock_gesture {\n\n\timport Timer = alm.time.Timer;\n\timport TimerEvent = alm.time.TimerEvent;\n\timport EventDispatcher = alm.event.EventDispatcher;\n\timport Dom = alm.util.Dom;\n\n\texport class UnlockGesture extends EventDispatcher {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(commands:HTMLElement[], resetDuration:number = 10000, hitArea:HTMLElement|Window = window) {\n\t\t\tsuper();\n\n\t\t\tthis.isRunning = false;\n\n\t\t\tthis.defaultCommands = commands.concat();\n\t\t\tthis.totalCount = this.defaultCommands.length;\n\n\t\t\tthis.resetDuration = resetDuration;\n\t\t\tthis.resetTimer = new Timer(this.resetDuration, 1);\n\t\t\tthis.resetTimer.addEventListener(TimerEvent.complete, this.resetTimerCompleteHandler);\n\n\t\t\tthis.hitArea = hitArea;\n\n\t\t\tthis.reset();\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic startObserving(eventListenerOptions:AddEventListenerOptions = null):void {\n\t\t\tif (this.isRunning) return;\n\t\t\tthis.isRunning = true;\n\n\t\t\tDom.addPointerDownListener(this.hitArea, this.windowPointerDownHandler, eventListenerOptions);\n\t\t\tthis.reset();\n\t\t}\n\n\t\tpublic stopObserving(eventListenerOptions:EventListenerOptions = null):void {\n\t\t\tif (!this.isRunning) return;\n\t\t\tthis.isRunning = false;\n\n\t\t\tDom.removePointerDownListener(this.hitArea, this.windowPointerDownHandler, eventListenerOptions);\n\t\t}\n\n\t\tpublic reset():void {\n\t\t\ttrace('[UnlockGesture] reset');\n\t\t\tthis.restCommands = this.defaultCommands.concat();\n\t\t\tthis.resetTimer.reset();\n\t\t\tthis.restCount = this.totalCount;\n\t\t\tthis.currentCount = 0;\n\t\t\tthis.dispatchEvent(new UnlockGestureEvent(UnlockGestureEvent.reset, this));\n\t\t}\n\n\t\tprivate windowPointerDownHandler = (event:PointerEvent):void => {\n\t\t\tconst command = this.restCommands[0];\n\t\t\tconst targetBounds = command.getBoundingClientRect();\n\t\t\tconst pointerX = event.clientX;\n\t\t\tconst pointerY = event.clientY;\n\n\t\t\tif ((pointerX >= targetBounds.left) && (pointerY >= targetBounds.top) && (pointerX <= targetBounds.right) && (pointerY <= targetBounds.bottom)) {\n\t\t\t\tthis.restCommands.shift();\n\t\t\t\tthis.restCount = this.restCommands.length;\n\t\t\t\tthis.totalCount = this.defaultCommands.length;\n\t\t\t\tthis.currentCount = this.totalCount - this.restCount;\n\n\t\t\t\tif (this.currentCount == 1) {\n\t\t\t\t\ttrace('[UnlockGesture] reset timer : start');\n\t\t\t\t\tthis.resetTimer.start();\n\t\t\t\t}\n\n\t\t\t\tif (this.restCount > 0) {\n\t\t\t\t\ttrace('[UnlockGesture] ok :', this.currentCount, '/', this.totalCount);\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureProgressEvent(UnlockGestureProgressEvent.progress, this, this.currentCount, this.totalCount));\n\t\t\t\t} else {\n\t\t\t\t\ttrace('[UnlockGesture] ok : complete');\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureProgressEvent(UnlockGestureProgressEvent.progress, this, this.currentCount, this.totalCount));\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureEvent(UnlockGestureEvent.complete, this));\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif (this.currentCount > 1) {\n\t\t\t\t\ttrace('[UnlockGesture] failure');\n\t\t\t\t\tthis.reset();\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureEvent(UnlockGestureEvent.failure, this));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprivate resetTimerCompleteHandler = (event:TimerEvent):void => {\n\t\t\ttrace('[UnlockGesture] reset time : complete');\n\t\t\tthis.reset();\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate isRunning:boolean;\n\t\tprivate hitArea:HTMLElement|Window;\n\t\tprivate defaultCommands:HTMLElement[];\n\t\tprivate restCommands:HTMLElement[];\n\t\tprivate totalCount:number;\n\t\tprivate restCount:number;\n\t\tprivate currentCount:number;\n\t\tprivate resetTimer:Timer;\n\t\tprivate resetDuration:number;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.unlock_gesture {\n\n\texport class UnlockGestureEvent extends alm.event.Event {\n\n\t\tpublic static readonly complete:string = 'UnlockGestureEvent.complete';\n\t\tpublic static readonly failure:string = 'UnlockGestureEvent.failure';\n\t\tpublic static readonly reset:string = 'UnlockGestureEvent.reset';\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(eventType:string, target:object) {\n\t\t\tsuper(eventType, target);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.unlock_gesture {\n\n\texport class UnlockGestureProgressEvent extends alm.event.Event {\n\n\t\tpublic static readonly progress:string = 'UnlockGestureProgressEvent.progress';\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(eventType:string, target:object, current:number, total:number) {\n\t\t\tsuper(eventType, target);\n\t\t\tthis.current = current;\n\t\t\tthis.total = total;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic readonly current:number;\n\t\tpublic readonly total:number;\n\t}\n}\n","/* ---------- project dependencies ---------- */\n\n/// <reference types='alumican' />\n\n\n/* ---------- project scripts ---------- */\n\n/// <reference path='alm/unlock_gesture/UnlockGesture.ts' />\n/// <reference path='alm/unlock_gesture/UnlockGestureEvent.ts' />\n/// <reference path='alm/unlock_gesture/UnlockGestureProgressEvent.ts' />\n"]}