{"version":3,"sources":["../src/alumican.unlock_gesture/alm/unlock_gesture/UnlockGesture.ts","../src/alumican.unlock_gesture/alm/unlock_gesture/UnlockGestureProgressEvent.ts","../src/alumican.unlock_gesture/alm/unlock_gesture/UnlockGestureEvent.ts"],"names":["alm","unlock_gesture","Timer","time","TimerEvent","EventDispatcher","event","Dom","util","UnlockGesture","constructor","commands","resetDuration","hitArea","window","super","this","windowPointerDownHandler","command","restCommands","targetBounds","getBoundingClientRect","pointerX","clientX","pointerY","clientY","left","top","right","bottom","shift","restCount","length","totalCount","defaultCommands","currentCount","trace","resetTimer","start","dispatchEvent","UnlockGestureProgressEvent","progress","UnlockGestureEvent","complete","reset","failure","resetTimerCompleteHandler","isRunning","concat","addEventListener","startObserving","eventListenerOptions","addPointerDownListener","stopObserving","removePointerDownListener","Event","eventType","target","current","total"],"mappings":"AAEA,ICAUA,KDAV,SAAUA,GAAI,CAAA,IAAAC,EAAAD,EAAAC,iBAAAD,EAAAC,eAAc,IAEpBC,EAAQF,EAAIG,KAAKD,MACjBE,EAAaJ,EAAIG,KAAKC,WACtBC,EAAkBL,EAAIM,MAAMD,gBAC5BE,EAAMP,EAAIQ,KAAKD,UAETE,UAAsBJ,EAQlCK,YAAYC,EAAwBC,EAAuB,IAAOC,EAA6BC,QAC9FC,QAkDOC,KAAAC,yBAA2B,IAClC,MAAMC,EAAUF,KAAKG,aAAa,GAClC,IAAMC,EAAeF,EAAQG,wBACvBC,EAAWhB,EAAMiB,QACjBC,EAAWlB,EAAMmB,QAElBH,GAAYF,EAAaM,MAAUF,GAAYJ,EAAaO,KAASL,GAAYF,EAAaQ,OAAWJ,GAAYJ,EAAaS,QACtIb,KAAKG,aAAaW,QAClBd,KAAKe,UAAYf,KAAKG,aAAaa,OACnChB,KAAKiB,WAAajB,KAAKkB,gBAAgBF,OACvChB,KAAKmB,aAAenB,KAAKiB,WAAajB,KAAKe,UAElB,GAArBf,KAAKmB,eACRC,MAAM,uCACNpB,KAAKqB,WAAWC,SAGI,EAAjBtB,KAAKe,WACRK,MAAM,uBAAwBpB,KAAKmB,aAAc,IAAKnB,KAAKiB,YAC3DjB,KAAKuB,cAAc,IAAItC,EAAAuC,2BAA2BvC,EAAAuC,2BAA2BC,SAAUzB,KAAMA,KAAKmB,aAAcnB,KAAKiB,eAErHG,MAAM,iCACNpB,KAAKuB,cAAc,IAAItC,EAAAuC,2BAA2BvC,EAAAuC,2BAA2BC,SAAUzB,KAAMA,KAAKmB,aAAcnB,KAAKiB,aACrHjB,KAAKuB,cAAc,IAAItC,EAAAyC,mBAAmBzC,EAAAyC,mBAAmBC,SAAU3B,SAIhD,EAApBA,KAAKmB,eACRC,MAAM,2BACNpB,KAAK4B,QACL5B,KAAKuB,cAAc,IAAItC,EAAAyC,mBAAmBzC,EAAAyC,mBAAmBG,QAAS7B,SAKjEA,KAAA8B,0BAA4B,IACnCV,MAAM,yCACNpB,KAAK4B,SArFL5B,KAAK+B,WAAY,EAEjB/B,KAAKkB,gBAAkBvB,EAASqC,SAChChC,KAAKiB,WAAajB,KAAKkB,gBAAgBF,OAEvChB,KAAKJ,cAAgBA,EACrBI,KAAKqB,WAAa,IAAInC,EAAMc,KAAKJ,cAAe,GAChDI,KAAKqB,WAAWY,iBAAiB7C,EAAWuC,SAAU3B,KAAK8B,2BAE3D9B,KAAKH,QAAUA,EAEfG,KAAK4B,QAaCM,eAAeC,EAA+C,MAChEnC,KAAK+B,YACT/B,KAAK+B,WAAY,EAEjBxC,EAAI6C,uBAAuBpC,KAAKH,QAASG,KAAKC,yBAA0BkC,GACxEnC,KAAK4B,SAGCS,cAAcF,EAA4C,MAC3DnC,KAAK+B,YACV/B,KAAK+B,WAAY,EAEjBxC,EAAI+C,0BAA0BtC,KAAKH,QAASG,KAAKC,yBAA0BkC,IAGrEP,QACNR,MAAM,yBACNpB,KAAKG,aAAeH,KAAKkB,gBAAgBc,SACzChC,KAAKqB,WAAWO,QAChB5B,KAAKe,UAAYf,KAAKiB,WACtBjB,KAAKmB,aAAe,EACpBnB,KAAKuB,cAAc,IAAItC,EAAAyC,mBAAmBzC,EAAAyC,mBAAmBE,MAAO5B,QAxDzDf,EAAAQ,cAAaA,GAP3B,CAAUT,IAAAA,KAAG,IEAb,SAAUA,GAAI,CAAA,IAAAC,EAAAD,EAAAC,iBAAAD,EAAAC,eAAc,UAEdyC,UAA2B1C,EAAIM,MAAMiD,MAgBjD7C,YAAY8C,EAAkBC,GAC7B1C,MAAMyC,EAAWC,IAfKf,EAAAC,SAAkB,8BAClBD,EAAAG,QAAiB,6BACjBH,EAAAE,MAAe,2BAJ1B3C,EAAAyC,mBAAkBA,GAFhC,CAAU1C,IAAAA,KAAG,IDAb,SAAUA,GAAI,CAAA,IAAAC,EAAAD,EAAAC,iBAAAD,EAAAC,eAAc,UAEduC,UAAmCxC,EAAIM,MAAMiD,MAczD7C,YAAY8C,EAAkBC,EAAeC,EAAgBC,GAC5D5C,MAAMyC,EAAWC,GACjBzC,KAAK0C,QAAUA,EACf1C,KAAK2C,MAAQA,GAfSnB,EAAAC,SAAkB,sCAF7BxC,EAAAuC,2BAA0BA,GAFxC,CAAUxC,IAAAA,KAAG","file":"index.min.js","sourcesContent":["/// <reference path=\"../../index.ts\" />\n\nnamespace alm.unlock_gesture {\n\n\timport Timer = alm.time.Timer;\n\timport TimerEvent = alm.time.TimerEvent;\n\timport EventDispatcher = alm.event.EventDispatcher;\n\timport Dom = alm.util.Dom;\n\n\texport class UnlockGesture extends EventDispatcher {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(commands:HTMLElement[], resetDuration:number = 10000, hitArea:HTMLElement|Window = window) {\n\t\t\tsuper();\n\n\t\t\tthis.isRunning = false;\n\n\t\t\tthis.defaultCommands = commands.concat();\n\t\t\tthis.totalCount = this.defaultCommands.length;\n\n\t\t\tthis.resetDuration = resetDuration;\n\t\t\tthis.resetTimer = new Timer(this.resetDuration, 1);\n\t\t\tthis.resetTimer.addEventListener(TimerEvent.complete, this.resetTimerCompleteHandler);\n\n\t\t\tthis.hitArea = hitArea;\n\n\t\t\tthis.reset();\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic startObserving(eventListenerOptions:AddEventListenerOptions = null):void {\n\t\t\tif (this.isRunning) return;\n\t\t\tthis.isRunning = true;\n\n\t\t\tDom.addPointerDownListener(this.hitArea, this.windowPointerDownHandler, eventListenerOptions);\n\t\t\tthis.reset();\n\t\t}\n\n\t\tpublic stopObserving(eventListenerOptions:EventListenerOptions = null):void {\n\t\t\tif (!this.isRunning) return;\n\t\t\tthis.isRunning = false;\n\n\t\t\tDom.removePointerDownListener(this.hitArea, this.windowPointerDownHandler, eventListenerOptions);\n\t\t}\n\n\t\tpublic reset():void {\n\t\t\ttrace('[UnlockGesture] reset');\n\t\t\tthis.restCommands = this.defaultCommands.concat();\n\t\t\tthis.resetTimer.reset();\n\t\t\tthis.restCount = this.totalCount;\n\t\t\tthis.currentCount = 0;\n\t\t\tthis.dispatchEvent(new UnlockGestureEvent(UnlockGestureEvent.reset, this));\n\t\t}\n\n\t\tprivate windowPointerDownHandler = (event:PointerEvent):void => {\n\t\t\tconst command = this.restCommands[0];\n\t\t\tconst targetBounds = command.getBoundingClientRect();\n\t\t\tconst pointerX = event.clientX;\n\t\t\tconst pointerY = event.clientY;\n\n\t\t\tif ((pointerX >= targetBounds.left) && (pointerY >= targetBounds.top) && (pointerX <= targetBounds.right) && (pointerY <= targetBounds.bottom)) {\n\t\t\t\tthis.restCommands.shift();\n\t\t\t\tthis.restCount = this.restCommands.length;\n\t\t\t\tthis.totalCount = this.defaultCommands.length;\n\t\t\t\tthis.currentCount = this.totalCount - this.restCount;\n\n\t\t\t\tif (this.currentCount == 1) {\n\t\t\t\t\ttrace('[UnlockGesture] reset timer : start');\n\t\t\t\t\tthis.resetTimer.start();\n\t\t\t\t}\n\n\t\t\t\tif (this.restCount > 0) {\n\t\t\t\t\ttrace('[UnlockGesture] ok :', this.currentCount, '/', this.totalCount);\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureProgressEvent(UnlockGestureProgressEvent.progress, this, this.currentCount, this.totalCount));\n\t\t\t\t} else {\n\t\t\t\t\ttrace('[UnlockGesture] ok : complete');\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureProgressEvent(UnlockGestureProgressEvent.progress, this, this.currentCount, this.totalCount));\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureEvent(UnlockGestureEvent.complete, this));\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif (this.currentCount > 1) {\n\t\t\t\t\ttrace('[UnlockGesture] failure');\n\t\t\t\t\tthis.reset();\n\t\t\t\t\tthis.dispatchEvent(new UnlockGestureEvent(UnlockGestureEvent.failure, this));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprivate resetTimerCompleteHandler = (event:TimerEvent):void => {\n\t\t\ttrace('[UnlockGesture] reset time : complete');\n\t\t\tthis.reset();\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate isRunning:boolean;\n\t\tprivate hitArea:HTMLElement|Window;\n\t\tprivate defaultCommands:HTMLElement[];\n\t\tprivate restCommands:HTMLElement[];\n\t\tprivate totalCount:number;\n\t\tprivate restCount:number;\n\t\tprivate currentCount:number;\n\t\tprivate resetTimer:Timer;\n\t\tprivate resetDuration:number;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.unlock_gesture {\n\n\texport class UnlockGestureProgressEvent extends alm.event.Event {\n\n\t\tpublic static readonly progress:string = 'UnlockGestureProgressEvent.progress';\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(eventType:string, target:object, current:number, total:number) {\n\t\t\tsuper(eventType, target);\n\t\t\tthis.current = current;\n\t\t\tthis.total = total;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic readonly current:number;\n\t\tpublic readonly total:number;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.unlock_gesture {\n\n\texport class UnlockGestureEvent extends alm.event.Event {\n\n\t\tpublic static readonly complete:string = 'UnlockGestureEvent.complete';\n\t\tpublic static readonly failure:string = 'UnlockGestureEvent.failure';\n\t\tpublic static readonly reset:string = 'UnlockGestureEvent.reset';\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(eventType:string, target:object) {\n\t\t\tsuper(eventType, target);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\t}\n}\n"]}