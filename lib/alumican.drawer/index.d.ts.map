{"version":3,"sources":["../src/alumican.drawer/alm/drawer/view/DrawerBackground.ts","../src/alumican.drawer/alm/drawer/view/DrawerForeground.ts","../src/alumican.drawer/alm/drawer/view/DrawerContainer.ts","../src/alumican.drawer/alm/drawer/DrawerTransition.ts","../src/alumican.drawer/alm/drawer/Drawer.ts","../src/alumican.drawer/index.ts"],"names":[],"mappings":"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","file":"index.d.ts","sourcesContent":["/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.drawer.view {\n\n\timport View = alm.view.View;\n\timport TweenCSS = alm.util.TweenCSS;\n\timport Easing = alm.math.Easing;\n\n\texport class DrawerBackground extends View<JQuery> {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(transition:DrawerTransition) {\n\t\t\tsuper();\n\n\t\t\tthis.transition = transition;\n\n\t\t\tthis.initialize();\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprotected implInitialize():JQuery {\n\t\t\tconst view = jQuery('<div>');\n\t\t\tview.addClass('drawer-background');\n\n\t\t\tthis.customShowTransition = null;\n\t\t\tthis.customHideTransition = null;\n\n\t\t\treturn view;\n\t\t}\n\n\t\tprotected implReady():void {\n\t\t}\n\n\t\tprotected implFinalize():void {\n\t\t}\n\n\t\tprotected implShow(view:JQuery, useTransition:boolean):cmd.Command {\n\t\t\tconst command = new cmd.Serial(\n\t\t\t\tnew cmd.Func(():void => {\n\t\t\t\t\tview.on('click', this.clickHandler);\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tif (this.customShowTransition) {\n\t\t\t\t// custom effect\n\t\t\t\tcommand.addCommand(this.customShowTransition);\n\t\t\t} else if (this.transition == DrawerTransition.none) {\n\t\t\t\t// no effect\n\t\t\t\tcommand.addCommand(new cmd.Func(():void => {\n\t\t\t\t\tview.css('display', 'block');\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\t// fade effect\n\t\t\t\tcommand.addCommand(TweenCSS.fadeIn(view, useTransition ? 500 : 0, Easing.easeOutQuart, 'block', false));\n\t\t\t}\n\n\t\t\treturn command;\n\t\t}\n\n\t\tprotected implHide(view:JQuery, useTransition:boolean):cmd.Command {\n\t\t\tconst command = new cmd.Serial();\n\n\t\t\tif (this.customHideTransition) {\n\t\t\t\t// custom effect\n\t\t\t\tcommand.addCommand(this.customHideTransition);\n\t\t\t} else if (this.transition == DrawerTransition.none) {\n\t\t\t\t// no effect\n\t\t\t\tcommand.addCommand(new cmd.Func(():void => {\n\t\t\t\t\tview.css('display', 'none');\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\t// fade effect\n\t\t\t\tcommand.addCommand(TweenCSS.fadeOut(view, useTransition ? 500 : 0, Easing.easeOutQuart, true, false));\n\t\t\t}\n\n\t\t\tcommand.addCommand(new cmd.Func(():void => {\n\t\t\t\tview.off('click', this.clickHandler);\n\t\t\t}));\n\n\t\t\treturn command;\n\t\t}\n\n\t\tpublic setCustomTransition(customShowTransition:cmd.Serial, customHideTransition:cmd.Serial):void {\n\t\t\tthis.customShowTransition = customShowTransition;\n\t\t\tthis.customHideTransition = customHideTransition;\n\t\t}\n\n\t\tprivate clickHandler = ():void => {\n\t\t\t(<any>window).closeDrawer();\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate transition:DrawerTransition;\n\t\tprivate customShowTransition:cmd.Serial;\n\t\tprivate customHideTransition:cmd.Serial;\n\t}\n}\n","/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.drawer.view {\n\n\timport View = alm.view.View;\n\timport Easing = alm.math.Easing;\n\timport EasingFunction = alm.math.EasingFunction;\n\timport TweenCSS = alm.util.TweenCSS;\n\n\texport class DrawerForeground extends View<JQuery> {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(content:JQuery, transition:DrawerTransition) {\n\t\t\tsuper(content);\n\n\t\t\tthis.content = content;\n\t\t\tthis.transition = transition;\n\n\t\t\tthis.initialize();\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprotected implInitialize():JQuery {\n\t\t\tconst view = jQuery('<div>');\n\t\t\tview.addClass('drawer-foreground');\n\t\t\tview.append(this.content);\n\n\t\t\tthis.content.css('display', 'block');\n\n\t\t\tswitch (this.transition) {\n\t\t\t\tcase DrawerTransition.left:\n\t\t\t\t\tview.css({ top: 0, left: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase DrawerTransition.right:\n\t\t\t\t\tview.css({ top: 0, right: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase DrawerTransition.top:\n\t\t\t\t\tview.css({ top: 0, left: 0 });\n\t\t\t\t\tbreak;\n\t\t\t\tcase DrawerTransition.bottom:\n\t\t\t\t\tview.css({ bottom: 0, left: 0 });\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.customShowTransition = null;\n\t\t\tthis.customHideTransition = null;\n\n\t\t\treturn view;\n\t\t}\n\n\t\tprotected implReady():void {\n\t\t}\n\n\t\tprotected implFinalize():void {\n\t\t}\n\n\t\tprotected implShow(view:JQuery, useTransition:boolean):cmd.Command {\n\t\t\tconst command = new cmd.Serial(\n\t\t\t\tnew cmd.Func(():void => {\n\t\t\t\t\tview.css('visibility', 'visible');\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tif (this.customShowTransition) {\n\t\t\t\t// custom effect\n\t\t\t\tcommand.addCommand(this.customShowTransition);\n\t\t\t} else if (this.transition === DrawerTransition.none) {\n\t\t\t\t// no effect\n\t\t\t} else if (this.transition === DrawerTransition.fade) {\n\t\t\t\t// fade effect\n\t\t\t\tcommand.addCommand(TweenCSS.fadeIn(view, useTransition ? 500 : 0, Easing.easeOutCubic, null, false));\n\t\t\t} else {\n\t\t\t\t// move effect\n\t\t\t\tlet prop = '';\n\t\t\t\tlet from = 0;\n\t\t\t\tswitch (this.transition) {\n\t\t\t\t\tcase DrawerTransition.left:\n\t\t\t\t\t\tprop = 'left';\n\t\t\t\t\t\tfrom = -this.getWidth();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DrawerTransition.right:\n\t\t\t\t\t\tprop = 'right';\n\t\t\t\t\t\tfrom = -this.getWidth();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DrawerTransition.top:\n\t\t\t\t\t\tprop = 'top';\n\t\t\t\t\t\tfrom = -this.getHeight();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DrawerTransition.bottom:\n\t\t\t\t\t\tprop = 'bottom';\n\t\t\t\t\t\tfrom = -this.getHeight();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (prop !== '') {\n\t\t\t\t\tview.css(prop, from);\n\t\t\t\t\tcommand.addCommand(this.move(view, prop, from, 0, useTransition ? 500 : 0, Easing.easeOutQuart));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn command;\n\t\t}\n\n\t\tprotected implHide(view:JQuery, useTransition:boolean):cmd.Command {\n\t\t\tconst command = new cmd.Serial();\n\n\t\t\tif (this.customHideTransition) {\n\t\t\t\t// custom effect\n\t\t\t\tcommand.addCommand(this.customHideTransition);\n\t\t\t} else if (this.transition === DrawerTransition.none) {\n\t\t\t\t// no effect\n\t\t\t} else if (this.transition === DrawerTransition.fade) {\n\t\t\t\t// fade effect\n\t\t\t\tcommand.addCommand(TweenCSS.fadeOut(view, useTransition ? 500 : 0, Easing.easeOutCubic, false, false));\n\t\t\t} else {\n\t\t\t\t// move effect\n\t\t\t\tlet prop = '';\n\t\t\t\tlet to = 0;\n\t\t\t\tswitch (this.transition) {\n\t\t\t\t\tcase DrawerTransition.left:\n\t\t\t\t\t\tprop = 'left';\n\t\t\t\t\t\tto = -this.getWidth();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DrawerTransition.right:\n\t\t\t\t\t\tprop = 'right';\n\t\t\t\t\t\tto = -this.getWidth();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DrawerTransition.top:\n\t\t\t\t\t\tprop = 'top';\n\t\t\t\t\t\tto = -this.getHeight();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DrawerTransition.bottom:\n\t\t\t\t\t\tprop = 'bottom';\n\t\t\t\t\t\tto = -this.getHeight();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (prop !== '') {\n\t\t\t\t\tcommand.addCommand(this.move(view, prop, 0, to, useTransition ? 500 : 0, Easing.easeOutQuart));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcommand.addCommand(new cmd.Func(():void => {\n\t\t\t\tview.css('visibility', 'hidden');\n\t\t\t}));\n\n\t\t\treturn command;\n\t\t}\n\n\t\tprivate move(target:JQuery, prop:string, from:number, to:number, duration:number = 500, easing:EasingFunction = Easing.easeOutQuart):cmd.Tween {\n\t\t\tlet o:Object = { value: from };\n\t\t\treturn new cmd.Tween(o, { value: to }, null, duration, easing, null, ():void => {\n\t\t\t\tconst value:number = o['value'];\n\t\t\t\ttarget.css(prop, value);\n\t\t\t}, null);\n\t\t}\n\n\t\tprivate getWidth():number {\n\t\t\treturn Math.round(this.getView().width());\n\t\t}\n\n\t\tprivate getHeight():number {\n\t\t\treturn Math.round(this.getView().height());\n\t\t}\n\n\t\tpublic setCustomTransition(customShowTransition:cmd.Serial, customHideTransition:cmd.Serial):void {\n\t\t\tthis.customShowTransition = customShowTransition;\n\t\t\tthis.customHideTransition = customHideTransition;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate content:JQuery;\n\t\tprivate transition:DrawerTransition;\n\t\tprivate customShowTransition:cmd.Serial;\n\t\tprivate customHideTransition:cmd.Serial;\n\t}\n}\n","/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.drawer.view {\n\n\timport View = alm.view.View;\n\n\texport class DrawerContainer extends View<JQuery> {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(content:JQuery, transition:DrawerTransition, drawerId:string = 'drawer') {\n\t\t\tsuper(content);\n\n\t\t\tthis.content = content;\n\t\t\tthis.transition = transition;\n\t\t\tthis.drawerId = drawerId;\n\n\t\t\tthis.initialize();\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprotected implInitialize():JQuery {\n\t\t\tconst view:JQuery = jQuery('<div>');\n\t\t\tview.attr('id', this.drawerId);\n\t\t\tview.addClass('drawer');\n\n\t\t\tthis.background = new DrawerBackground(this.transition);\n\t\t\tthis.foreground = new DrawerForeground(this.content, this.transition);\n\n\t\t\treturn view;\n\t\t}\n\n\t\tprotected implReady():void {\n\t\t\tconst view = this.getView();\n\n\t\t\tthis.background.ready();\n\t\t\tview.append(this.background.getView());\n\n\t\t\tthis.foreground.ready();\n\t\t\tview.append(this.foreground.getView());\n\n\t\t\tjQuery('body').append(view);\n\t\t}\n\n\t\tprotected implFinalize():void {\n\t\t\tthis.background.finalize();\n\t\t\tthis.background = null;\n\n\t\t\tthis.foreground.finalize();\n\t\t\tthis.foreground = null;\n\n\t\t\tthis.content = null;\n\t\t}\n\n\t\tprotected implShow(view:JQuery, useTransition:boolean):cmd.Command {\n\t\t\treturn new cmd.Serial(\n\t\t\t\tnew cmd.Func(():void => {\n\t\t\t\t\tview.css('display', 'block');\n\t\t\t\t}),\n\t\t\t\tnew cmd.Parallel(\n\t\t\t\t\tthis.background.getShowCommand(useTransition),\n\t\t\t\t\tthis.foreground.getShowCommand(useTransition),\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tprotected implHide(view:JQuery, useTransition:boolean):cmd.Command {\n\t\t\treturn new cmd.Serial(\n\t\t\t\tnew cmd.Parallel(\n\t\t\t\t\tthis.background.getHideCommand(useTransition),\n\t\t\t\t\tthis.foreground.getHideCommand(useTransition),\n\t\t\t\t),\n\t\t\t\tnew cmd.Func(():void => {\n\t\t\t\t\tview.css('display', 'none');\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tpublic getContent():JQuery {\n\t\t\treturn this.content;\n\t\t}\n\n\t\tpublic getDrawerId():string {\n\t\t\treturn this.drawerId;\n\t\t}\n\n\t\tpublic setBackgroundCustomTransition(showCommand:cmd.Serial, hideCommand:cmd.Serial):void {\n\t\t\tthis.background.setCustomTransition(showCommand, hideCommand);\n\t\t}\n\n\t\tpublic setForegroundCustomTransition(showCommand:cmd.Serial, hideCommand:cmd.Serial):void {\n\t\t\tthis.foreground.setCustomTransition(showCommand, hideCommand);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate background:DrawerBackground;\n\t\tprivate foreground:DrawerForeground;\n\n\t\tprivate content:JQuery;\n\t\tprivate transition:DrawerTransition;\n\t\tprivate drawerId:string;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.drawer {\n\n\texport enum DrawerTransition {\n\t\tnone = 'none',\n\t\tfade = 'fade',\n\t\tleft = 'left',\n\t\tright = 'right',\n\t\ttop = 'top',\n\t\tbottom = 'bottom',\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.drawer {\n\n\timport DrawerContainer = alm.drawer.view.DrawerContainer;\n\n\texport class Drawer {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(content:JQuery, transition:DrawerTransition, drawerId:string = 'drawer') {\n\t\t\tthis.container = new DrawerContainer(content, transition, drawerId);\n\t\t\tthis.container.ready();\n\n\t\t\t(<any>window).openDrawer = this.container.show.bind(this.container);\n\t\t\t(<any>window).closeDrawer = this.container.hide.bind(this.container);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic open(useTransition:boolean = true):void {\n\t\t\tthis.container.show(useTransition);\n\t\t}\n\n\t\tpublic close(useTransition:boolean = true):void {\n\t\t\tthis.container.hide(useTransition);\n\t\t}\n\n\t\tpublic dispose():void {\n\t\t\tthis.container.finalize();\n\t\t\tthis.container = null;\n\n\t\t\tdelete (<any>window).openDrawer;\n\t\t\tdelete (<any>window).closeDrawer;\n\t\t}\n\n\t\tpublic getView():JQuery {\n\t\t\treturn this.container.getView();\n\t\t}\n\n\t\tpublic getContentView():JQuery {\n\t\t\treturn this.container.getContent();\n\t\t}\n\n\t\tpublic getDrawerId():string {\n\t\t\treturn this.getDrawerId();\n\t\t}\n\n\t\tpublic setBackgroundCustomTransition(showCommand:cmd.Serial, hideCommand:cmd.Serial):void {\n\t\t\tthis.container.setBackgroundCustomTransition(showCommand, hideCommand);\n\t\t}\n\n\t\tpublic setForegroundCustomTransition(showCommand:cmd.Serial, hideCommand:cmd.Serial):void {\n\t\t\tthis.container.setForegroundCustomTransition(showCommand, hideCommand);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// VARIABLE\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate container:DrawerContainer;\n\t}\n}\n","/* ---------- project dependencies ---------- */\n\n/// <reference types='jquery' />\n/// <reference types='alumican' />\n/// <reference types='alumican.jquery' />\n\n\n/* ---------- project scripts ---------- */\n\n/// <reference path='alm/drawer/view/DrawerBackground.ts' />\n/// <reference path='alm/drawer/view/DrawerForeground.ts' />\n/// <reference path='alm/drawer/view/DrawerContainer.ts' />\n/// <reference path='alm/drawer/DrawerTransition.ts' />\n/// <reference path='alm/drawer/Drawer.ts' />\n"]}