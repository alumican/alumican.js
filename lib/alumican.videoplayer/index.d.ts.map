{"version":3,"sources":["../src/alumican.videoplayer/alm/video/core/VideoClip.ts","../src/alumican.videoplayer/alm/video/core/VideoClipEvent.ts","../src/alumican.videoplayer/alm/video/core/SimpleVideoClip.ts","../src/alumican.videoplayer/alm/video/core/LoopPointVideoClip.ts","../src/alumican.videoplayer/alm/video/core/StaticImageClip.ts","../src/alumican.videoplayer/alm/video/VideoPlayer.ts","../src/alumican.videoplayer/alm/video/VideoPlayerEvent.ts","../src/alumican.videoplayer/index.ts"],"names":[],"mappings":"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","file":"index.d.ts","sourcesContent":["/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.video {\n\n\timport Cmd = alm.util.Cmd;\n\timport Easing = alm.math.Easing;\n\timport EventDispatcher = alm.event.EventDispatcher;\n\n\texport class VideoClip extends EventDispatcher {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(volume:number) {\n\t\t\tsuper();\n\t\t\tthis.volume = this.defaultVolume = volume;\n\t\t\tthis.isInitializing = true;\n\t\t}\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprotected setup():void {\n\t\t\tthis.isShowing = true;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.opacity = 1;\n\t\t\tthis.view = document.createElement('div');\n\t\t\tthis.view.classList.add('video-clip');\n\t\t\tthis.implSetup(this.view, this.volume);\n\t\t\tthis.hide(0, 0);\n\t\t\tthis.isInitializing = false;\n\t\t}\n\n\t\tpublic start(duration:number):void {\n\t\t\tif (this.isPlaying) return;\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.show(duration);\n\t\t}\n\n\t\tpublic stop(duration:number, delay:number):void {\n\t\t\tif (!this.isPlaying) return;\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.hide(duration, delay);\n\t\t}\n\n\t\tpublic rewind():void {\n\t\t\tthis.implRewind(this.view);\n\t\t}\n\n\t\tpublic restart():void {\n\t\t\tif (this.isPlaying) {\n\t\t\t\tthis.implRewind(this.view);\n\t\t\t\tthis.implStart(this.view);\n\t\t\t} else {\n\t\t\t\tthis.start(0);\n\t\t\t}\n\t\t}\n\n\t\tpublic dispose():void {\n\t\t\tthis.displayTween = Cmd.stop(this.displayTween);\n\t\t\tthis.implDispose(this.view);\n\t\t\tif (this.view) {\n\t\t\t\tthis.view.remove();\n\t\t\t\tthis.view = null;\n\t\t\t}\n\t\t}\n\n\t\tprivate show(duration:number):void {\n\t\t\tif (this.isShowing) return;\n\t\t\tthis.isShowing = true;\n\n\t\t\tconst view = this.getView();\n\t\t\tif (this.displayTween) {\n\t\t\t\tthis.displayTween = Cmd.stop(this.displayTween);\n\t\t\t}\n\n\t\t\tif (duration > 0) {\n\t\t\t\t// animate\n\t\t\t\tthis.displayTween = new cmd.Tween(this, { opacity: 1 }, null, duration, Easing.easeOutQuad, ():void => {\n\t\t\t\t\tview.style.display = 'block';\n\t\t\t\t\tthis.implStart(this.view);\n\t\t\t\t}, ():void => {\n\t\t\t\t\tview.style.opacity = this.opacity.toString();\n\t\t\t\t\tthis.applyVolume();\n\t\t\t\t}, ():void => {\n\t\t\t\t\tthis.displayTween = null;\n\t\t\t\t});\n\t\t\t\tthis.displayTween.execute();\n\n\t\t\t} else {\n\t\t\t\t// no animation\n\t\t\t\tview.style.display = 'block';\n\t\t\t\tthis.implStart(this.view);\n\t\t\t\tthis.opacity = 1;\n\t\t\t\tview.style.opacity = this.opacity.toString();\n\t\t\t\tthis.applyVolume();\n\t\t\t}\n\t\t}\n\n\t\tprivate hide(duration:number, delay:number):void {\n\t\t\tif (!this.isShowing) return;\n\t\t\tthis.isShowing = false;\n\n\t\t\tconst view = this.getView();\n\t\t\tif (this.displayTween) {\n\t\t\t\tthis.displayTween = Cmd.stop(this.displayTween);\n\t\t\t}\n\n\t\t\tif (duration > 0) {\n\t\t\t\t// animate\n\t\t\t\tconst tween = new cmd.Tween(this, { opacity: 0 }, null, duration, Easing.easeOutQuad, null, ():void => {\n\t\t\t\t\tview.style.opacity = this.opacity.toString();\n\t\t\t\t\tthis.applyVolume();\n\t\t\t\t}, ():void => {\n\t\t\t\t\tview.style.display = 'none';\n\t\t\t\t\tthis.displayTween = null;\n\t\t\t\t\tif (!this.isInitializing) {\n\t\t\t\t\t\tthis.implStop(this.view);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (delay > 0) {\n\t\t\t\t\tthis.displayTween = new cmd.Serial(\n\t\t\t\t\t\tnew cmd.Wait(delay),\n\t\t\t\t\t\ttween,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis.displayTween = tween;\n\t\t\t\t}\n\t\t\t\tthis.displayTween.execute();\n\n\t\t\t} else {\n\t\t\t\t// no animation\n\t\t\t\tthis.opacity = 0;\n\t\t\t\tview.style.opacity = this.opacity.toString();\n\t\t\t\tthis.applyVolume();\n\t\t\t\tview.style.display = 'none';\n\t\t\t\tif (!this.isInitializing) {\n\t\t\t\t\tthis.implStop(this.view);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate applyVolume():void {\n\t\t\tif (this.defaultVolume > 0) {\n\t\t\t\tthis.volume = this.defaultVolume * this.opacity;\n\t\t\t\tthis.implUpdateVolume(this.volume);\n\t\t\t}\n\t\t}\n\n\t\tprotected dispatchVideoEvent(eventType:string):void {\n\t\t\tthis.dispatchEvent(new VideoClipEvent(eventType, this));\n\t\t}\n\n\t\tpublic getView():HTMLElement {\n\t\t\treturn this.view;\n\t\t}\n\n\t\tpublic getIsPlaying():boolean {\n\t\t\treturn this.isPlaying;\n\t\t}\n\n\t\tpublic getDefaultVolume():number {\n\t\t\treturn this.defaultVolume;\n\t\t}\n\n\t\tpublic getVolume():number {\n\t\t\treturn this.volume;\n\t\t}\n\n\t\tpublic getOpacity():number {\n\t\t\treturn this.opacity;\n\t\t}\n\n\n\n\n\n\t\tprotected implSetup(view:HTMLElement, volume:number):void {\n\t\t}\n\n\t\tprotected implStart(view:HTMLElement):void {\n\t\t}\n\n\t\tprotected implStop(view:HTMLElement):void {\n\t\t}\n\n\t\tprotected implRewind(view:HTMLElement):void {\n\t\t}\n\n\t\tprotected implDispose(view:HTMLElement):void {\n\t\t}\n\n\t\tprotected implUpdateVolume(volume:number):void {\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate view:HTMLElement;\n\t\tprivate isInitializing:boolean;\n\t\tprivate isPlaying:boolean;\n\t\tprivate isShowing:boolean;\n\t\tprivate defaultVolume:number;\n\t\tprivate opacity:number;\n\t\tprivate volume:number;\n\t\tprivate displayTween:cmd.Command;\n\t}\n}\n","/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.video {\n\n\texport class VideoClipEvent extends alm.event.Event {\n\n\t\tpublic static readonly complete:string = 'VideoClipEvent.complete';\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(eventType:string, target:object) {\n\t\t\tsuper(eventType, target);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\t}\n}\n","/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.video {\n\n\texport class SimpleVideoClip extends VideoClip {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(url:string, volume:number) {\n\t\t\tsuper(volume);\n\t\t\tthis.url = url;\n\t\t\tthis.intervalId = -1;\n\t\t\tthis.setup();\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprotected implSetup(view:HTMLElement, volume:number):void {\n\t\t\tthis.isReady = false;\n\n\t\t\tthis.video = document.createElement('video');\n\t\t\tthis.video.setAttribute('muted', 'muted');\n\t\t\tthis.video.classList.add('video-media');\n\t\t\tthis.video.playsInline = true;\n\t\t\tthis.video.controls = false;\n\t\t\tthis.video.autoplay = false;\n\t\t\tthis.video.preload = 'auto';\n\t\t\tthis.video.loop = false;\n\t\t\tthis.video.volume = volume;\n\t\t\tthis.video.muted = volume === 0;\n\t\t\tthis.video.src = this.url;\n\t\t\tthis.video.addEventListener('canplaythrough', this.videoCanplaythroughHandler);\n\t\t\t//this.video.addEventListener('timeupdate', this.videoTimeupdateHandler);\n\t\t\tthis.video.addEventListener('ended', this.videoEndedHandler);\n\t\t\tthis.video.load();\n\t\t\tthis.getView().appendChild(this.video);\n\t\t}\n\n\t\tprotected implStart(view:HTMLElement):void {\n\t\t\tif (this.video.paused) {\n\t\t\t\tthis.video.play();\n\t\t\t}\n\t\t\tthis.startTimer();\n\t\t}\n\n\t\tprotected implStop(view:HTMLElement):void {\n\t\t\tif (!this.video.paused) {\n\t\t\t\tthis.video.pause();\n\t\t\t}\n\t\t\tthis.video.currentTime = 0;\n\t\t\tthis.stopTimer();\n\t\t}\n\n\t\tprotected implRewind(view:HTMLElement):void {\n\t\t\tthis.video.currentTime = 0;\n\t\t}\n\n\t\tprotected implDispose(view:HTMLElement):void {\n\t\t\tview.removeChild(this.video);\n\t\t\tthis.video.pause();\n\t\t\tthis.video.removeAttribute('src');\n\t\t\tthis.video.load();\n\t\t\tthis.video = null;\n\t\t\tthis.stopTimer();\n\t\t}\n\n\t\tprotected implUpdateVolume(volume:number):void {\n\t\t\tthis.video.volume = volume;\n\t\t}\n\n\t\tprivate videoCanplaythroughHandler = (event:Event):void => {\n\t\t\tif (this.isReady) return;\n\t\t\tthis.isReady = true;\n\t\t};\n\n\t\tprivate videoTimeupdateHandler = (event:Event):void => {\n\t\t\tthis.update();\n\t\t};\n\n\t\tprivate videoEndedHandler = (event:Event):void => {\n\t\t\t//if (!this.video.paused) {\n\t\t\t//\tthis.video.pause();\n\t\t\t//}\n\t\t\t//this.dispatchVideoEvent(VideoClipEvent.complete);\n\t\t};\n\n\t\tprivate update():void {\n\t\t\tif (this.video.currentTime >= this.video.duration) {\n\t\t\t\tif (!this.video.paused) {\n\t\t\t\t\tthis.video.pause();\n\t\t\t\t}\n\t\t\t\tthis.stopTimer();\n\t\t\t\tthis.dispatchVideoEvent(VideoClipEvent.complete);\n\t\t\t}\n\t\t}\n\n\t\tprivate startTimer():void {\n\t\t\tif (this.intervalId !== -1) return;\n\t\t\tthis.intervalId = window.setInterval(this.timerHandler, 1000 / 60);\n\t\t}\n\n\t\tprivate stopTimer():void {\n\t\t\tif (this.intervalId === -1) return;\n\t\t\twindow.clearInterval(this.intervalId);\n\t\t\tthis.intervalId = -1;\n\t\t}\n\n\t\tprivate timerHandler = ():void => {\n\t\t\tthis.update();\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate url:string;\n\t\tprivate video:HTMLVideoElement;\n\t\tprivate isReady:boolean;\n\t\tprivate intervalId:number;\n\t}\n}\n","/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.video {\n\n\texport class LoopPointVideoClip extends VideoClip {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(url:string, volume:number, loopStartPosition:number, loopEndPosition:number) {\n\t\t\tsuper(volume);\n\t\t\tthis.url = url;\n\t\t\tthis.loopStartPosition = loopStartPosition;\n\t\t\tthis.loopEndPosition = loopEndPosition;\n\t\t\tthis.intervalId = -1;\n\t\t\tthis.setup();\n\t\t}\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprotected implSetup(view:HTMLElement, volume:number):void {\n\t\t\tthis.isReady = false;\n\t\t\tthis.phase = 0;\n\n\t\t\tthis.video = document.createElement('video');\n\t\t\tthis.video.classList.add('video-media');\n\t\t\tthis.video.playsInline = true;\n\t\t\tthis.video.controls = false;\n\t\t\tthis.video.autoplay = false;\n\t\t\tthis.video.preload = 'auto';\n\t\t\tthis.video.loop = false;\n\t\t\tthis.video.volume = volume;\n\t\t\tthis.video.muted = volume === 0;\n\t\t\tthis.video.src = this.url;\n\t\t\tthis.video.addEventListener('canplaythrough', this.videoCanplaythroughHandler);\n\t\t\t//this.video.addEventListener('timeupdate', this.videoTimeupdateHandler);\n\t\t\tthis.video.addEventListener('ended', this.videoEndedHandler);\n\t\t\tthis.video.load();\n\t\t\tthis.getView().appendChild(this.video);\n\t\t}\n\n\t\tprotected implStart(view:HTMLElement):void {\n\t\t\tthis.phase = 0;\n\t\t\tthis.video.currentTime = 0;\n\t\t\tif (this.video.paused) {\n\t\t\t\tthis.video.play();\n\t\t\t}\n\t\t\tthis.startTimer();\n\t\t}\n\n\t\tprotected implStop(view:HTMLElement):void {\n\t\t\tthis.phase = 2;\n\t\t\tthis.video.currentTime = this.loopEndPosition;\n\t\t}\n\n\t\tprotected implRewind(view:HTMLElement):void {\n\t\t\tthis.phase = 0;\n\t\t\tthis.video.currentTime = 0;\n\t\t}\n\n\t\tprotected implUpdateVolume(volume:number):void {\n\t\t\tthis.video.volume = volume;\n\t\t}\n\n\t\tprotected implDispose(view:HTMLElement):void {\n\t\t\tview.removeChild(this.video);\n\t\t\tthis.video.pause();\n\t\t\tthis.video.removeAttribute('src');\n\t\t\tthis.video.load();\n\t\t\tthis.video = null;\n\t\t\tthis.stopTimer();\n\t\t}\n\n\t\tprivate videoCanplaythroughHandler = (event:Event):void => {\n\t\t\tif (this.isReady) return;\n\t\t\tthis.isReady = true;\n\t\t};\n\n\t\tprivate videoTimeupdateHandler = (event:Event):void => {\n\t\t\tthis.update();\n\t\t};\n\n\t\tprivate videoEndedHandler = (event:Event):void => {\n\t\t};\n\n\t\tprivate update():void {\n\t\t\tconst currentTime = this.video.currentTime;\n\n\t\t\tif (this.phase === 0 && currentTime >= this.loopStartPosition) {\n\t\t\t\tthis.phase = 1;\n\t\t\t}\n\n\t\t\tif (this.phase === 1 && currentTime >= this.loopEndPosition) {\n\t\t\t\tthis.video.currentTime = this.loopStartPosition;\n\t\t\t\tif (this.video.paused) {\n\t\t\t\t\tthis.video.play();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.phase === 2 && currentTime >= this.video.duration) {\n\t\t\t\tthis.phase = 3;\n\t\t\t\tthis.video.currentTime = this.video.duration;\n\t\t\t\tif (!this.video.paused) {\n\t\t\t\t\tthis.video.pause();\n\t\t\t\t}\n\t\t\t\tthis.stopTimer();\n\t\t\t\tthis.dispatchVideoEvent(VideoClipEvent.complete);\n\t\t\t}\n\t\t}\n\n\t\tprivate startTimer():void {\n\t\t\tif (this.intervalId !== -1) return;\n\t\t\tthis.intervalId = window.setInterval(this.timerHandler, 1000 / 60);\n\t\t}\n\n\t\tprivate stopTimer():void {\n\t\t\tif (this.intervalId === -1) return;\n\t\t\twindow.clearInterval(this.intervalId);\n\t\t\tthis.intervalId = -1;\n\t\t}\n\n\t\tprivate timerHandler = ():void => {\n\t\t\tthis.update();\n\t\t};\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate url:string;\n\t\tprivate video:HTMLVideoElement;\n\t\tprivate loopStartPosition:number;\n\t\tprivate loopEndPosition:number;\n\t\tprivate isReady:boolean;\n\t\tprivate phase:number;\n\t\tprivate intervalId:number;\n\t}\n}\n","/// <reference path=\"../../../index.ts\" />\n\nnamespace alm.video {\n\n\texport class StaticImageClip extends VideoClip {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(url:string, duration:number) {\n\t\t\tsuper(0);\n\t\t\tthis.url = url;\n\t\t\tthis.duration = duration;\n\t\t\tthis.timerId = -1;\n\t\t\tthis.setup();\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprotected implSetup(view:HTMLElement, volume:number):void {\n\t\t\tthis.isReady = false;\n\n\t\t\tthis.image = new Image();\n\t\t\tthis.image.addEventListener('load', this.imageLoadHandler);\n\t\t\tthis.image.classList.add('video-media');\n\t\t\tthis.image.src = this.url;\n\n\t\t\tthis.getView().appendChild(this.image);\n\t\t}\n\n\t\tprotected implStart(view:HTMLElement):void {\n\t\t\tthis.startTimer();\n\t\t}\n\n\t\tprotected implStop(view:HTMLElement):void {\n\t\t\tthis.stopTimer();\n\t\t}\n\n\t\tprotected implRewind(view:HTMLElement):void {\n\t\t\tthis.stopTimer();\n\t\t\tthis.startTimer();\n\t\t}\n\n\t\tprotected implDispose(view:HTMLElement):void {\n\t\t\tthis.stopTimer();\n\t\t\tview.removeChild(this.image);\n\n\t\t\tthis.image.removeEventListener('load', this.imageLoadHandler);\n\t\t\tthis.image.remove();\n\t\t\tthis.image.src = '';\n\t\t\tthis.image = null;\n\t\t}\n\n\t\tprotected implUpdateVolume(volume:number):void {\n\t\t}\n\n\t\tprivate imageLoadHandler = (event:Event):void => {\n\t\t\tif (this.isReady) return;\n\t\t\tthis.isReady = true;\n\t\t};\n\n\t\tprivate startTimer():void {\n\t\t\tif (this.timerId !== -1) return;\n\t\t\tif (this.duration > 0) {\n\t\t\t\tthis.timerId = window.setTimeout(():void => {\n\t\t\t\t\tthis.timerId = -1;\n\t\t\t\t\tthis.dispatchVideoEvent(VideoClipEvent.complete);\n\t\t\t\t}, this.duration);\n\t\t\t}\n\t\t}\n\n\t\tprivate stopTimer():void {\n\t\t\tif (this.timerId === -1) return;\n\t\t\twindow.clearTimeout(this.timerId);\n\t\t\tthis.timerId = -1;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate url:string;\n\t\tprivate image:HTMLImageElement;\n\t\tprivate duration:number;\n\t\tprivate isReady:boolean;\n\t\tprivate timerId:number;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.video {\n\n\timport Hash = alm.util.Hash;\n\timport EventDispatcher = alm.event.EventDispatcher;\n\n\texport class VideoPlayer extends EventDispatcher {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(container:HTMLElement = null, className:string = 'video-player') {\n\t\t\tsuper();\n\n\t\t\tthis.container = container || document.createElement('div');\n\t\t\tif (className !== '') {\n\t\t\t\tthis.container.classList.add(className);\n\t\t\t}\n\n\t\t\tthis.clips = [];\n\t\t\tthis.clipsById = {};\n\t\t\tthis.clipIndicesById = {};\n\t\t\tthis.clipIdsByIndex = {};\n\t\t\tthis.clipCount = 0;\n\n\t\t\tthis.isPlaying = false;\n\t\t\tthis.isLoop = false;\n\t\t\tthis.isCrossOverEnabled = true;\n\t\t\tthis.crossFadeDuration = 500;\n\n\t\t\tthis.currentClipId = '';\n\t\t\tthis.oldClipId = '';\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic load(url:string, volume:number = 1, id:string = ''):number {\n\t\t\treturn this.loadInternal(url, id, ():VideoClip => {\n\t\t\t\treturn new SimpleVideoClip(url, volume);\n\t\t\t});\n\t\t}\n\n\t\tpublic loadWithLoopPoint(url:string, loopStartPosition:number, loopEndPosition:number, volume:number = 1, id:string = ''):number {\n\t\t\treturn this.loadInternal(url, id, ():VideoClip => {\n\t\t\t\treturn new LoopPointVideoClip(url, volume, loopStartPosition, loopEndPosition);\n\t\t\t});\n\t\t}\n\n\t\tpublic loadImage(url:string, duration:number = 0, id:string = ''):number {\n\t\t\treturn this.loadInternal(url, id, ():VideoClip => {\n\t\t\t\treturn new StaticImageClip(url, duration);\n\t\t\t});\n\t\t}\n\n\t\tprivate loadInternal(url:string, id:string, clipFactory:() => VideoClip):number {\n\t\t\tif (id === '') id = url;\n\t\t\tif (this.clipsById[id]) return -1;\n\t\t\tconsole.debug('[VideoPlayer] load :', url);\n\n\t\t\tconst clip = clipFactory();\n\t\t\tclip.addEventListener(VideoClipEvent.complete, this.clipCompleteHandler);\n\t\t\tthis.container.appendChild(clip.getView());\n\n\t\t\tconst index = this.clipCount;\n\t\t\tthis.clips.push(clip);\n\t\t\tthis.clipsById[id] = clip;\n\t\t\tthis.clipIndicesById[id] = index;\n\t\t\tthis.clipIdsByIndex[index] = id;\n\t\t\t++this.clipCount;\n\n\t\t\treturn index;\n\t\t}\n\n\t\tpublic unload(id:string):boolean {\n\t\t\tif (!this.clipsById[id]) return false;\n\t\t\tif (this.currentClipId === id) {\n\t\t\t\tthis.stop();\n\t\t\t}\n\t\t\tconst clip = this.clipsById[id];\n\t\t\tclip.removeEventListener(VideoClipEvent.complete, this.clipCompleteHandler);\n\t\t\tclip.dispose();\n\t\t\tthis.container.removeChild(clip.getView());\n\n\t\t\tdelete this.clipsById[id];\n\t\t\tthis.clips[this.clipIndicesById[id]] = null;\n\t\t}\n\n\t\tpublic playById(id:string, rewind:boolean = false, loop:boolean = false, useTransition:boolean = true):void {\n\t\t\tthis.switchClip(id, rewind, loop, useTransition);\n\t\t}\n\n\t\tpublic playByIndex(index:number, rewind:boolean = false, loop:boolean = false, useTransition:boolean = true):void {\n\t\t\tthis.switchClip(this.clipIdsByIndex[index], rewind, loop, useTransition);\n\t\t}\n\n\t\tpublic stop(useTransition:boolean = true):void {\n\t\t\tthis.switchClip('', false, false, useTransition);\n\t\t}\n\n\t\tpublic dispose():void {\n\t\t\tthis.switchClip('', false, false, false);\n\n\t\t\tfor (let i = 0; i < this.clipCount; ++i) {\n\t\t\t\tconst clip = this.clips[i];\n\t\t\t\tif (clip) {\n\t\t\t\t\tclip.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.clips = null;\n\t\t\tthis.clipsById = null;\n\t\t\tthis.clipIndicesById = null;\n\t\t\tthis.clipIdsByIndex = null;\n\t\t\tthis.container = null;\n\t\t}\n\n\n\n\n\n\t\tprivate switchClip(clipId:string, useRewind:boolean, isLoop:boolean, useTransition:boolean):void {\n\t\t\tif (!this.clipsById[clipId]) clipId = '';\n\n\t\t\tif (clipId === this.currentClipId) {\n\t\t\t\tif (useRewind && this.currentClipId !== '') {\n\t\t\t\t\tconsole.debug('[VideoPlayer] rewind :', this.currentClipId);\n\t\t\t\t\tconst clip = this.clipsById[this.currentClipId];\n\t\t\t\t\tthis.isLoop = isLoop;\n\t\t\t\t\tclip.restart();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.oldClipId = this.currentClipId;\n\t\t\tthis.currentClipId = clipId;\n\t\t\tconsole.debug('[VideoPlayer] switch :', this.oldClipId, '->', this.currentClipId);\n\n\t\t\tif (this.oldClipId !== '') {\n\t\t\t\tconst clip = this.clipsById[this.oldClipId];\n\t\t\t\tclip.stop(useTransition ? this.crossFadeDuration : 0, (useTransition && (!this.isCrossOverEnabled) && (this.currentClipId !== '')) ? this.crossFadeDuration : 0);\n\t\t\t}\n\n\t\t\tif (this.currentClipId !== '') {\n\t\t\t\tconst clip = this.clipsById[this.currentClipId];\n\t\t\t\tthis.isPlaying = true;\n\t\t\t\tthis.isLoop = isLoop;\n\t\t\t\tclip.start(useTransition ? this.crossFadeDuration : 0);\n\t\t\t} else {\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\t\t}\n\n\t\tprivate clipCompleteHandler = (event:VideoClipEvent):void => {\n\t\t\tif (this.isLoop) {\n\t\t\t\tthis.switchClip(this.currentClipId, true, true, false);\n\t\t\t} else {\n\t\t\t\tthis.dispatchEvent(new VideoPlayerEvent(VideoPlayerEvent.complete, this, this.currentClipId, this.clipIndicesById[this.currentClipId]));\n\t\t\t}\n\t\t};\n\n\t\tpublic getContainer():HTMLElement {\n\t\t\treturn this.container;\n\t\t}\n\n\t\tpublic setIsCrossOverEnabled(isEnabled:boolean):void {\n\t\t\tthis.isCrossOverEnabled = isEnabled;\n\t\t}\n\n\t\tpublic getIsCrossOverEnabled():boolean {\n\t\t\treturn this.isCrossOverEnabled;\n\t\t}\n\n\t\tpublic setCrossFadeDuration(duration:number):void {\n\t\t\tthis.crossFadeDuration = duration;\n\t\t}\n\n\t\tpublic getCrossFadeDuration():number {\n\t\t\treturn this.crossFadeDuration;\n\t\t}\n\n\t\tpublic getIsPlaying():boolean {\n\t\t\treturn this.isPlaying;\n\t\t}\n\n\t\tpublic getIsLoop():boolean {\n\t\t\treturn this.isLoop;\n\t\t}\n\n\t\tpublic getClipCount():number {\n\t\t\treturn this.clipCount;\n\t\t}\n\n\t\tpublic getCurrentClipId():string {\n\t\t\treturn this.currentClipId;\n\t\t}\n\n\t\tpublic getOldClipId():string {\n\t\t\treturn this.oldClipId;\n\t\t}\n\n\t\tpublic getCurrentClipIndex():number {\n\t\t\treturn this.clipIndicesById[this.currentClipId];\n\t\t}\n\n\t\tpublic getOldClipIndex():number {\n\t\t\treturn this.clipIndicesById[this.oldClipId];\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate container:HTMLElement;\n\n\t\tprivate clips:VideoClip[];\n\t\tprivate clipsById:Hash<VideoClip>;\n\t\tprivate clipIndicesById:Hash<number>;\n\t\tprivate clipIdsByIndex:Hash<string>;\n\t\tprivate clipCount:number;\n\n\t\tprivate isPlaying:boolean;\n\t\tprivate isLoop:boolean;\n\t\tprivate isCrossOverEnabled:boolean;\n\t\tprivate crossFadeDuration:number;\n\n\t\tprivate currentClipId:string;\n\t\tprivate oldClipId:string;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.video {\n\n\texport class VideoPlayerEvent extends alm.event.Event {\n\n\t\tpublic static readonly complete:string = 'VideoPlayerEvent.complete';\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(eventType:string, target:object, clipId:string, clipIndex:number) {\n\t\t\tsuper(eventType, target);\n\t\t\tthis.clipId = clipId;\n\t\t\tthis.clipIndex = clipIndex;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic readonly clipId:string;\n\t\tpublic readonly clipIndex:number;\n\t}\n}\n","/* ---------- project dependencies ---------- */\n\n/// <reference types='alumican' />\n\n\n/* ---------- project scripts ---------- */\n\n/// <reference path='alm/video/core/VideoClip.ts' />\n/// <reference path='alm/video/core/VideoClipEvent.ts' />\n/// <reference path='alm/video/core/SimpleVideoClip.ts' />\n/// <reference path='alm/video/core/LoopPointVideoClip.ts' />\n/// <reference path='alm/video/core/StaticImageClip.ts' />\n/// <reference path='alm/video/VideoPlayer.ts' />\n/// <reference path='alm/video/VideoPlayerEvent.ts' />\n"]}