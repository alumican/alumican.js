var alm;!function(t){{var u=t.multitouch||(t.multitouch={});class e extends EventTarget{constructor(t,i=null){super(),this.hitAreaTouchStartHandler=t=>{for(var i in this.touchingPointersByPointerId){const n=this.touchingPointersByPointerId[i];n.isLastTouch=!1,n.isLatestTouch=!1}const e=t.changedTouches;var o=e.length;for(let t=0;t<o;++t){var s=e.item(t);const h=this.getTouchPointer(s);h.isTouching=!0;s=u.TouchUtil.getLocalTouchPosition(s,this.startHitArea);h.x=s.offsetX,h.y=s.offsetY,t===o-1&&(h.isLastTouch=!0,h.isLatestTouch=!0,h.latestStartTime=performance.now()),this.isTouching||1!==this.touchingCount||(h.isFirstTouch=!0,h.isOldestTouch=!0,h.oldestStartTime=performance.now()),this.isTouching=0<this.touchingCount,this.dispatchDefaultEvent(u.MultitouchEventType.touchStart,h)}},this.hitAreaTouchMoveHandler=t=>{if(0!==this.touchingCount){const o=t.changedTouches;var i=o.length;for(let t=0;t<i;++t){var e=o.item(t);const s=this.getTouchPointer(e);s.isTouching=!0;e=u.TouchUtil.getLocalTouchPosition(e,this.startHitArea);s.x=e.offsetX,s.y=e.offsetY,this.dispatchDefaultEvent(u.MultitouchEventType.touchMove,s)}}},this.hitAreaTouchEndHandler=t=>{if(0!==this.touchingCount){const o=t.changedTouches;var i=o.length;for(let t=0;t<i;++t){var e=o.item(t);const s=this.getTouchPointer(e);s.isTouching=!1,s.isOldestTouch=!1,s.isLatestTouch=!1;e=u.TouchUtil.getLocalTouchPosition(e,this.startHitArea),e=(s.x=e.offsetX,s.y=e.offsetY,this.touchingPointerIds.indexOf(s.pointerId));-1!==e&&(this.touchingPointerIds.splice(e,1),this.touchingCount=this.touchingPointerIds.length),delete this.touchingPointersByPointerId[s.pointerId],this.isTouching=0<this.touchingCount,this.dispatchDefaultEvent(u.MultitouchEventType.touchEnd,s)}{const n=this.getOldestPointer();n&&!n.isOldestTouch&&(n.isOldestTouch=!0,n.oldestStartTime=performance.now())}{const h=this.getLatestPointer();h&&!h.isLatestTouch&&(h.isLatestTouch=!0,h.latestStartTime=performance.now())}}},this.hitAreaMouseDownHandler=t=>{this.touchingCount=1,this.isTouching=!0,this.mousePointerId=++e.mousePointerId;t=u.TouchUtil.getLocalPosition(t.clientX,t.clientY,this.startHitArea);const i=new u.MultitouchPointer(this.mousePointerId,t.offsetX,t.offsetY);i.isTouching=!0,i.isFirstTouch=!0,i.isLastTouch=!0,i.isOldestTouch=!0,i.isLatestTouch=!0,this.touchingPointersByPointerId[i.pointerId]=i,this.touchingPointerIds.push(i.pointerId),this.dispatchDefaultEvent(u.MultitouchEventType.touchStart,i)},this.hitAreaMouseMoveHandler=t=>{if(0!==this.touchingCount){const i=this.touchingPointersByPointerId[this.mousePointerId];i.isTouching=!0;t=u.TouchUtil.getLocalPosition(t.clientX,t.clientY,this.startHitArea);i.x=t.offsetX,i.y=t.offsetY,this.dispatchDefaultEvent(u.MultitouchEventType.touchMove,i)}},this.hitAreaMouseUpHandler=t=>{if(0!==this.touchingCount){this.touchingCount=0,this.isTouching=!1;const i=this.touchingPointersByPointerId[this.mousePointerId];i.isTouching=!1,i.isOldestTouch=!1,i.isLatestTouch=!1,i.touchEndTime=performance.now(),this.mousePointerId=-1;t=u.TouchUtil.getLocalPosition(t.clientX,t.clientY,this.startHitArea);i.x=t.offsetX,i.y=t.offsetY,delete this.touchingPointersByPointerId[i.pointerId],this.touchingPointerIds.pop(),this.dispatchDefaultEvent(u.MultitouchEventType.touchEnd,i)}},this.startHitArea=t,this.moveEndHitArea=i||window,this.isTouchEventEnabled=u.TouchUtil.getIsTouchEventSupported(),this.touchingPointersByPointerId={},this.touchingPointerIds=[],this.touchingCount=0,console.debug("[Multitouch] touchEvent enabled :",this.isTouchEventEnabled)}start(){console.debug("[Multitouch] start"),this.isTouchEventEnabled?(this.startHitArea.addEventListener("touchstart",this.hitAreaTouchStartHandler),this.moveEndHitArea.addEventListener("touchmove",this.hitAreaTouchMoveHandler),this.moveEndHitArea.addEventListener("touchend",this.hitAreaTouchEndHandler)):(this.startHitArea.addEventListener("mousedown",this.hitAreaMouseDownHandler),this.moveEndHitArea.addEventListener("mousemove",this.hitAreaMouseMoveHandler),this.moveEndHitArea.addEventListener("mouseup",this.hitAreaMouseUpHandler))}stop(){console.debug("[Multitouch] stop"),this.isTouchEventEnabled?(this.startHitArea.removeEventListener("touchstart",this.hitAreaTouchStartHandler),this.moveEndHitArea.removeEventListener("touchmove",this.hitAreaTouchMoveHandler),this.moveEndHitArea.removeEventListener("touchend",this.hitAreaTouchEndHandler)):(this.startHitArea.removeEventListener("mousedown",this.hitAreaMouseDownHandler),this.moveEndHitArea.removeEventListener("mousemove",this.hitAreaMouseMoveHandler),this.moveEndHitArea.removeEventListener("mouseup",this.hitAreaMouseUpHandler))}dispose(){this.stop(),this.startHitArea=null,this.moveEndHitArea=null,this.touchingPointersByPointerId=null,this.touchingPointerIds=null}getTouchPointer(t){t=t.identifier;let i=this.touchingPointersByPointerId[t];return i||(i=this.touchingPointersByPointerId[t]=new u.MultitouchPointer(t),this.touchingPointerIds.push(i.pointerId),this.touchingCount=this.touchingPointerIds.length),i}dispatchDefaultEvent(t,i){this.dispatchEvent(new u.MultitouchEvent(t,{detail:{pointer:i}}))}getIsTouching(){return this.isTouching}getTouchingCount(){return this.touchingCount}getTouchingPointerIds(){return this.touchingPointerIds.concat()}getTouchingPointer(t){return this.touchingPointersByPointerId[t]}getOldestPointer(){return 0<this.touchingCount?this.touchingPointersByPointerId[this.touchingPointerIds[0]]:null}getLatestPointer(){return 0<this.touchingCount?this.touchingPointersByPointerId[this.touchingPointerIds[this.touchingCount-1]]:null}}e.mousePointerId=-1,u.Multitouch=e}}(alm=alm||{}),function(t){(t.multitouch||(t.multitouch={})).MultitouchPointer=class{constructor(t,i=0,e=0){this.pointerId=t,this.isTouching=!1,this.isFirstTouch=!1,this.isLastTouch=!1,this.isOldestTouch=!1,this.isLatestTouch=!1,this.x=i,this.y=e,this.touchStartTime=performance.now(),this.touchEndTime=-1,this.oldestStartTime=-1,this.latestStartTime=-1}}}(alm=alm||{}),function(t){var i;{t=t.multitouch||(t.multitouch={}),(i=t.MultitouchEventType||(t.MultitouchEventType={})).touchStart="touchstart",i.touchMove="touchmove",i.touchEnd="touchend";class e extends CustomEvent{constructor(t,i){super(t,i)}}t.MultitouchEvent=e}}(alm=alm||{}),function(t){{t=t.multitouch||(t.multitouch={});class e{static getIsTouchEventSupported(){return void 0!==window.document.ontouchstart||0<window.navigator.maxTouchPoints}static getLocalTouchPosition(t,i){return e.getLocalPosition(t.clientX,t.clientY,i)}static getLocalPosition(t,i,e){return e.getBoundingClientRect?(e=e.getBoundingClientRect(),{offsetX:t-window.scrollX-e.left,offsetY:i-window.scrollY-e.top}):{offsetX:t,offsetY:i}}constructor(){}}t.TouchUtil=e}}(alm=alm||{});
//# sourceMappingURL=index.min.js.map
