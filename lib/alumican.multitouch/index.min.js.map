{"version":3,"sources":["../src/alumican.multitouch/alm/multitouch/Multitouch.ts","../src/alumican.multitouch/alm/multitouch/TouchUtil.ts","../src/alumican.multitouch/alm/multitouch/MultitouchPointer.ts","../src/alumican.multitouch/alm/multitouch/MultitouchEvent.ts"],"names":["alm","multitouch","Multitouch","EventTarget","constructor","startHitArea","moveEndHitArea","super","this","hitAreaTouchStartHandler","let","pointerId","touchingPointersByPointerId","pointer","isLastTouch","isLatestTouch","changedTouches","event","changedTouchCount","length","i","touch","item","getTouchPointer","isTouching","localPosition","TouchUtil","getLocalTouchPosition","x","offsetX","y","offsetY","latestStartTime","performance","now","touchingCount","isFirstTouch","isOldestTouch","oldestStartTime","dispatchDefaultEvent","MultitouchEventType","touchStart","hitAreaTouchMoveHandler","touchMove","hitAreaTouchEndHandler","pointerIndex","touchingPointerIds","indexOf","splice","touchEnd","getOldestPointer","getLatestPointer","hitAreaMouseDownHandler","mousePointerId","getLocalPosition","clientX","clientY","MultitouchPointer","push","hitAreaMouseMoveHandler","hitAreaMouseUpHandler","touchEndTime","pop","window","isTouchEventEnabled","getIsTouchEventSupported","console","debug","start","addEventListener","stop","removeEventListener","dispose","touchId","identifier","eventType","dispatchEvent","MultitouchEvent","detail","getIsTouching","getTouchingCount","getTouchingPointerIds","concat","getTouchingPointer","touchStartTime","CustomEvent","type","options","undefined","document","navigator","maxTouchPoints","local","rect","getBoundingClientRect","scrollX","left","scrollY","top"],"mappings":"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","file":"index.min.js","sourcesContent":["/// <reference path=\"../../index.ts\" />\n\nnamespace alm.multitouch {\n\n\timport Hash = alm.util.Hash;\n\n\texport class Multitouch extends EventTarget {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(startHitArea:HTMLElement | Window, moveEndHitArea:HTMLElement | Window = null) {\n\t\t\tsuper();\n\n\t\t\tthis.startHitArea = startHitArea;\n\t\t\tthis.moveEndHitArea = moveEndHitArea || window;\n\t\t\tthis.isTouchEventEnabled = TouchUtil.getIsTouchEventSupported();\n\t\t\tthis.touchingPointersByPointerId = {};\n\t\t\tthis.touchingPointerIds = [];\n\t\t\tthis.touchingCount = 0;\n\n\t\t\tconsole.debug('[Multitouch] touchEvent enabled :', this.isTouchEventEnabled);\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic start():void {\n\t\t\tconsole.debug('[Multitouch] start');\n\n\t\t\tif (this.isTouchEventEnabled) {\n\t\t\t\tthis.startHitArea.addEventListener('touchstart', this.hitAreaTouchStartHandler);\n\t\t\t\tthis.moveEndHitArea.addEventListener('touchmove', this.hitAreaTouchMoveHandler);\n\t\t\t\tthis.moveEndHitArea.addEventListener('touchend', this.hitAreaTouchEndHandler);\n\t\t\t} else {\n\t\t\t\tthis.startHitArea.addEventListener('mousedown', this.hitAreaMouseDownHandler);\n\t\t\t\tthis.moveEndHitArea.addEventListener('mousemove', this.hitAreaMouseMoveHandler);\n\t\t\t\tthis.moveEndHitArea.addEventListener('mouseup', this.hitAreaMouseUpHandler);\n\t\t\t}\n\t\t}\n\n\t\tpublic stop():void {\n\t\t\tconsole.debug('[Multitouch] stop');\n\n\t\t\tif (this.isTouchEventEnabled) {\n\t\t\t\tthis.startHitArea.removeEventListener('touchstart', this.hitAreaTouchStartHandler);\n\t\t\t\tthis.moveEndHitArea.removeEventListener('touchmove', this.hitAreaTouchMoveHandler);\n\t\t\t\tthis.moveEndHitArea.removeEventListener('touchend', this.hitAreaTouchEndHandler);\n\t\t\t} else {\n\t\t\t\tthis.startHitArea.removeEventListener('mousedown', this.hitAreaMouseDownHandler);\n\t\t\t\tthis.moveEndHitArea.removeEventListener('mousemove', this.hitAreaMouseMoveHandler);\n\t\t\t\tthis.moveEndHitArea.removeEventListener('mouseup', this.hitAreaMouseUpHandler);\n\t\t\t}\n\t\t}\n\n\t\tpublic dispose():void {\n\t\t\tthis.stop();\n\t\t\tthis.startHitArea = null;\n\t\t\tthis.moveEndHitArea = null;\n\t\t\tthis.touchingPointersByPointerId = null;\n\t\t\tthis.touchingPointerIds = null;\n\t\t}\n\n\n\t\tprivate hitAreaTouchStartHandler = (event:TouchEvent):void => {\n\t\t\tfor (let pointerId in this.touchingPointersByPointerId) {\n\t\t\t\tconst pointer = this.touchingPointersByPointerId[pointerId];\n\t\t\t\tpointer.isLastTouch = false;\n\t\t\t\tpointer.isLatestTouch = false;\n\t\t\t}\n\n\t\t\tconst changedTouches = event.changedTouches;\n\t\t\tconst changedTouchCount = changedTouches.length;\n\t\t\tfor (let i = 0; i < changedTouchCount; ++i) {\n\t\t\t\tconst touch = changedTouches.item(i);\n\t\t\t\tconst pointer = this.getTouchPointer(touch);\n\t\t\t\tpointer.isTouching = true;\n\n\t\t\t\tconst localPosition = TouchUtil.getLocalTouchPosition(touch, this.startHitArea);\n\t\t\t\tpointer.x = localPosition.offsetX;\n\t\t\t\tpointer.y = localPosition.offsetY;\n\n\t\t\t\t// last touch\n\t\t\t\tif (i === changedTouchCount - 1) {\n\t\t\t\t\tpointer.isLastTouch = true;\n\t\t\t\t\tpointer.isLatestTouch = true;\n\t\t\t\t\tpointer.latestStartTime = performance.now();\n\t\t\t\t}\n\n\t\t\t\t// 0 touching -> 1 touching\n\t\t\t\tif (!this.isTouching && (this.touchingCount === 1)) {\n\t\t\t\t\tpointer.isFirstTouch = true;\n\t\t\t\t\tpointer.isOldestTouch = true;\n\t\t\t\t\tpointer.oldestStartTime = performance.now();\n\t\t\t\t}\n\n\t\t\t\tthis.isTouching = this.touchingCount > 0;\n\n\t\t\t\tthis.dispatchDefaultEvent(MultitouchEventType.touchStart, pointer);\n\t\t\t}\n\t\t};\n\n\t\tprivate hitAreaTouchMoveHandler = (event:TouchEvent):void => {\n\t\t\tif (this.touchingCount === 0) return;\n\n\t\t\tconst changedTouches = event.changedTouches;\n\t\t\tconst changedTouchCount = changedTouches.length;\n\t\t\tfor (let i = 0; i < changedTouchCount; ++i) {\n\t\t\t\tconst touch = changedTouches.item(i);\n\t\t\t\tconst pointer = this.getTouchPointer(touch);\n\t\t\t\tpointer.isTouching = true;\n\n\t\t\t\tconst localPosition = TouchUtil.getLocalTouchPosition(touch, this.startHitArea);\n\t\t\t\tpointer.x = localPosition.offsetX;\n\t\t\t\tpointer.y = localPosition.offsetY;\n\n\t\t\t\tthis.dispatchDefaultEvent(MultitouchEventType.touchMove, pointer);\n\t\t\t}\n\t\t};\n\n\t\tprivate hitAreaTouchEndHandler = (event:TouchEvent):void => {\n\t\t\tif (this.touchingCount === 0) return;\n\n\t\t\tconst changedTouches = event.changedTouches;\n\t\t\tconst changedTouchCount = changedTouches.length;\n\t\t\tfor (let i = 0; i < changedTouchCount; ++i) {\n\t\t\t\tconst touch = changedTouches.item(i);\n\t\t\t\tconst pointer = this.getTouchPointer(touch);\n\t\t\t\tpointer.isTouching = false;\n\t\t\t\tpointer.isOldestTouch = false;\n\t\t\t\tpointer.isLatestTouch = false;\n\n\t\t\t\tconst localPosition = TouchUtil.getLocalTouchPosition(touch, this.startHitArea);\n\t\t\t\tpointer.x = localPosition.offsetX;\n\t\t\t\tpointer.y = localPosition.offsetY;\n\n\t\t\t\tconst pointerIndex = this.touchingPointerIds.indexOf(pointer.pointerId);\n\t\t\t\tif (pointerIndex !== -1) {\n\t\t\t\t\tthis.touchingPointerIds.splice(pointerIndex, 1);\n\t\t\t\t\tthis.touchingCount = this.touchingPointerIds.length;\n\t\t\t\t}\n\t\t\t\tdelete this.touchingPointersByPointerId[pointer.pointerId];\n\t\t\t\tthis.isTouching = this.touchingCount > 0;\n\n\t\t\t\tthis.dispatchDefaultEvent(MultitouchEventType.touchEnd, pointer);\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tconst pointer = this.getOldestPointer();\n\t\t\t\tif (pointer && !pointer.isOldestTouch) {\n\t\t\t\t\tpointer.isOldestTouch = true;\n\t\t\t\t\tpointer.oldestStartTime = performance.now();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tconst pointer = this.getLatestPointer();\n\t\t\t\tif (pointer && !pointer.isLatestTouch) {\n\t\t\t\t\tpointer.isLatestTouch = true;\n\t\t\t\t\tpointer.latestStartTime = performance.now();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tprivate getTouchPointer(touch:Touch):MultitouchPointer {\n\t\t\tconst touchId = touch.identifier;\n\t\t\tlet pointer = this.touchingPointersByPointerId[touchId];\n\t\t\tif (!pointer) {\n\t\t\t\tpointer = this.touchingPointersByPointerId[touchId] = new MultitouchPointer(touchId);\n\t\t\t\tthis.touchingPointerIds.push(pointer.pointerId);\n\t\t\t\tthis.touchingCount = this.touchingPointerIds.length;\n\t\t\t}\n\t\t\treturn pointer;\n\t\t}\n\n\t\tprivate hitAreaMouseDownHandler = (event:MouseEvent):void => {\n\t\t\tthis.touchingCount = 1;\n\t\t\tthis.isTouching = true;\n\n\t\t\tthis.mousePointerId = ++Multitouch.mousePointerId;\n\n\t\t\tconst localPosition = TouchUtil.getLocalPosition(event.clientX, event.clientY, this.startHitArea);\n\t\t\tconst pointer = new MultitouchPointer(this.mousePointerId, localPosition.offsetX, localPosition.offsetY);\n\t\t\tpointer.isTouching = true;\n\t\t\tpointer.isFirstTouch = true;\n\t\t\tpointer.isLastTouch = true;\n\t\t\tpointer.isOldestTouch = true;\n\t\t\tpointer.isLatestTouch = true;\n\n\t\t\tthis.touchingPointersByPointerId[pointer.pointerId] = pointer;\n\t\t\tthis.touchingPointerIds.push(pointer.pointerId);\n\n\t\t\tthis.dispatchDefaultEvent(MultitouchEventType.touchStart, pointer);\n\t\t};\n\n\t\tprivate hitAreaMouseMoveHandler = (event:MouseEvent):void => {\n\t\t\tif (this.touchingCount === 0) return;\n\n\t\t\tconst pointer = this.touchingPointersByPointerId[this.mousePointerId];\n\t\t\tpointer.isTouching = true;\n\n\t\t\tconst localPosition = TouchUtil.getLocalPosition(event.clientX, event.clientY, this.startHitArea);\n\t\t\tpointer.x = localPosition.offsetX;\n\t\t\tpointer.y = localPosition.offsetY;\n\n\t\t\tthis.dispatchDefaultEvent(MultitouchEventType.touchMove, pointer);\n\t\t};\n\n\t\tprivate hitAreaMouseUpHandler = (event:MouseEvent):void => {\n\t\t\tif (this.touchingCount === 0) return;\n\t\t\tthis.touchingCount = 0;\n\t\t\tthis.isTouching = false;\n\n\t\t\tconst pointer = this.touchingPointersByPointerId[this.mousePointerId];\n\t\t\tpointer.isTouching = false;\n\t\t\tpointer.isOldestTouch = false;\n\t\t\tpointer.isLatestTouch = false;\n\t\t\tpointer.touchEndTime = performance.now();\n\n\t\t\tthis.mousePointerId = -1;\n\n\t\t\tconst localPosition = TouchUtil.getLocalPosition(event.clientX, event.clientY, this.startHitArea);\n\t\t\tpointer.x = localPosition.offsetX;\n\t\t\tpointer.y = localPosition.offsetY;\n\n\t\t\tdelete this.touchingPointersByPointerId[pointer.pointerId];\n\t\t\tthis.touchingPointerIds.pop();\n\n\t\t\tthis.dispatchDefaultEvent(MultitouchEventType.touchEnd, pointer);\n\t\t};\n\n\t\tprivate dispatchDefaultEvent(eventType:MultitouchEventType, pointer:MultitouchPointer):void {\n\t\t\tthis.dispatchEvent(new MultitouchEvent(eventType, { detail: { pointer: pointer } }));\n\t\t}\n\n\n\t\tpublic getIsTouching():boolean {\n\t\t\treturn this.isTouching;\n\t\t}\n\n\t\tpublic getTouchingCount():number {\n\t\t\treturn this.touchingCount;\n\t\t}\n\n\t\tpublic getTouchingPointerIds():number[] {\n\t\t\treturn this.touchingPointerIds.concat();\n\t\t}\n\n\t\tpublic getTouchingPointer(pointerId:number):MultitouchPointer {\n\t\t\treturn this.touchingPointersByPointerId[pointerId];\n\t\t}\n\n\t\tpublic getOldestPointer():MultitouchPointer {\n\t\t\treturn this.touchingCount > 0 ? this.touchingPointersByPointerId[this.touchingPointerIds[0]] : null;\n\t\t}\n\n\t\tpublic getLatestPointer():MultitouchPointer {\n\t\t\treturn this.touchingCount > 0 ? this.touchingPointersByPointerId[this.touchingPointerIds[this.touchingCount - 1]] : null;\n\t\t}\n\n\n\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tprivate touchingPointersByPointerId:Hash<MultitouchPointer>;\n\t\tprivate touchingPointerIds:number[];\n\t\tprivate touchingCount:number;\n\t\tprivate isTouching:boolean;\n\n\t\tprivate readonly isTouchEventEnabled:boolean;\n\t\tprivate startHitArea:HTMLElement | Window;\n\t\tprivate moveEndHitArea:HTMLElement | Window;\n\n\t\tprivate mousePointerId:number;\n\t\tprivate static mousePointerId:number = -1;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.multitouch {\n\n\texport class TouchUtil {\n\n\t\tpublic static getIsTouchEventSupported():boolean {\n\t\t\treturn (window.document['ontouchstart'] !== undefined) || (window.navigator.maxTouchPoints > 0);\n\t\t}\n\n\t\tpublic static getLocalTouchPosition(touch:Touch, local:HTMLElement | Window):{ offsetX:number, offsetY:number } {\n\t\t\treturn TouchUtil.getLocalPosition(touch.clientX, touch.clientY, local);\n\t\t}\n\n\t\tpublic static getLocalPosition(clientX:number, clientY:number, local:HTMLElement | Window):{ offsetX:number, offsetY:number } {\n\t\t\tif (local['getBoundingClientRect']) {\n\t\t\t\tconst rect = (<HTMLElement>local).getBoundingClientRect();\n\t\t\t\treturn { offsetX: clientX - window.scrollX - rect.left, offsetY: clientY - window.scrollY - rect.top };\n\t\t\t} else {\n\t\t\t\treturn { offsetX: clientX, offsetY: clientY };\n\t\t\t}\n\t\t}\n\n\n\n\n\n\t\tprivate constructor() {\n\t\t}\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.multitouch {\n\n\texport class MultitouchPointer {\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// CONSTRUCTOR\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tconstructor(pointerId:number, x:number = 0, y:number = 0) {\n\t\t\tthis.pointerId = pointerId;\n\t\t\tthis.isTouching = false;\n\t\t\tthis.isFirstTouch = false;\n\t\t\tthis.isLastTouch = false;\n\t\t\tthis.isOldestTouch = false;\n\t\t\tthis.isLatestTouch = false;\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.touchStartTime = performance.now();\n\t\t\tthis.touchEndTime = -1;\n\t\t\tthis.oldestStartTime = -1;\n\t\t\tthis.latestStartTime = -1;\n\t\t}\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// METHOD\n\t\t//\n\t\t// --------------------------------------------------\n\n\n\t\t// --------------------------------------------------\n\t\t//\n\t\t// MEMBER\n\t\t//\n\t\t// --------------------------------------------------\n\n\t\tpublic readonly pointerId:number;\n\t\tpublic isTouching:boolean;\n\t\tpublic isFirstTouch:boolean;\n\t\tpublic isLastTouch:boolean;\n\t\tpublic isOldestTouch:boolean;\n\t\tpublic isLatestTouch:boolean;\n\t\tpublic x:number;\n\t\tpublic y:number;\n\t\tpublic touchStartTime:number;\n\t\tpublic touchEndTime:number;\n\t\tpublic oldestStartTime:number;\n\t\tpublic latestStartTime:number;\n\t}\n}\n","/// <reference path=\"../../index.ts\" />\n\nnamespace alm.multitouch {\n\n\texport enum MultitouchEventType {\n\t\ttouchStart = 'touchstart',\n\t\ttouchMove = 'touchmove',\n\t\ttouchEnd = 'touchend',\n\t}\n\n\texport interface MultitouchEventDetail {\n\t\tpointer:MultitouchPointer;\n\t}\n\n\texport class MultitouchEvent extends CustomEvent<MultitouchEventDetail> {\n\t\tconstructor(type:MultitouchEventType, options:CustomEventInit<MultitouchEventDetail>) {\n\t\t\tsuper(type, options);\n\t\t}\n\t}\n}\n"]}